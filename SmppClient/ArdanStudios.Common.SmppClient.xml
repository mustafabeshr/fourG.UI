<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ArdanStudios.Common.SmppClient</name>
    </assembly>
    <members>
        <member name="T:ArdanStudios.Common.SmppClient.AlertNotification">
            <summary> This message is sent by the SMSC (Short Message Service Centre) to the ESME (Extended Short Message Entity),
            when the SMSC has detected that a particular mobile subscriber has become available and a delivery
            pending flag had been set for that subscriber from a previous data_sm operation </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.AlertNotification.SourceAddrTon">
            <summary> Source address type of number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.AlertNotification.SourceAddrNpi">
            <summary> Source address numbering plan indicator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.AlertNotification.SourceAddr">
            <summary> Source phone number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.AlertNotification.EsmeAddrTon">
            <summary> Destination address type of number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.AlertNotification.EsmeAddrNpi">
            <summary> Destination address numbering plan indicator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.AlertNotification.EsmeAddr">
            <summary> Destination phone number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.AlertNotification.Optional">
            <summary> Optional Parameters</summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.AlertNotification.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.AlertNotification.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a AlertNotification object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> AlertNotification </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.AlertNotification.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.App.PduApp">
            <summary> Provides access to the pdu related business rules </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.App.PduApp.InsertPdu(System.String,System.String,System.Int32,ArdanStudios.Common.SmppClient.PduDirectionTypes,System.Collections.Generic.List{ArdanStudios.Common.SmppClient.PduPropertyDetail},System.Collections.Generic.List{System.Byte[]},System.Nullable{System.Guid}@)">
            <summary> Called to save a pdu by its property details </summary>
            <param name="logKey"></param>
            <param name="connection"></param>
            <param name="smscServiceId"></param>
            <param name="pduDirectionType"></param>
            <param name="details"></param>
            <param name="pduDataBlocks"></param>
            <param name="pduHeaderId"></param>
            <returns> ResultCodeTypes </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.DataCodings">
            <summary> Indicates the encoding scheme of the short message </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.Default">
            <summary> SMSC Default Alphabet (0x0) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.ASCII">
            <summary> IA5 (CCITT T.50)/ASCII (ANSI X3.4) (0x1) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.Octets">
            <summary> NOT SUPPORTED : Octet unspecified (8-bit binary) (0x2) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.Latin1">
            <summary> Latin 1 (ISO-8859-1) (0x3) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.OctetUnspecified">
            <summary> NOT SUPPORTED :  Octet unspecified (8-bit binary) (0x4) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.Cyrllic">
            <summary> NOT SUPPORTED :  Cyrllic (ISO-8859-5)(0x6) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.LatinHebrew">
            <summary> NOT SUPPORTED :  Latin/Hebrew (ISO-8859-8) (0x7) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.UCS2">
            <summary> UCS2 (ISO/IEC-10646) (0x8) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.DefaultFlashSMS">
            <summary> NOT SUPPORTED :  Flash SMS </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.UnicodeFlashSMS">
            <summary> NOT SUPPORTED :  Flash SMS with Unicode characters (0x18) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.Latin1Escape">
            <summary> NOT SUPPORTED :  Latin 1 (ISO-8859-1) (0x3) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.Class0">
            <summary> NOT SUPPORTED :  Message Class 0 (0xF0) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.Class1">
            <summary> NOT SUPPORTED :  Message Class 1 (0xF1) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.Class2">
            <summary> NOT SUPPORTED :  Message Class 2 (0xF2) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.Class3">
            <summary> NOT SUPPORTED :  Message Class 3 (0xF3) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.Class0Alert8Bit">
            <summary> NOT SUPPORTED :  Class 0 Alert 8bit data (0xF4) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DataCodings.Class1ME8Bit">
            <summary> NOT SUPPORTED :  Class 1 ME specific 8-bit data (0xF5) </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ConnectionStatus">
            <summary> Client connection status </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ConnectionStatus.Open">
            <summary> Client connected, but not bound </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ConnectionStatus.Bound">
            <summary> Client bound </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ConnectionStatus.Closed">
            <summary> Connection closed </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ConnectionModes">
            <summary> ESME (Extended Short Message Entity) may bind to the SMSC (Short Message Service Centre) as either a
            Transmitter (called ESME Transmitter), a Receiver (called ESME Receiver) or a Transceiver (called ESME Transceiver) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ConnectionModes.Transmitter">
            <summary> An ESME bound as a Transmitter is authorised to send short messages to the SMSC and to
            receive the corresponding SMPP responses from the SMSC </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ConnectionModes.Receiver">
            <summary> An ESME bound as a Receiver is authorised to receive short messages from the SMSC and to
            return the corresponding SMPP message responses to the SMSC </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ConnectionModes.Transceiver">
            <summary> An ESME bound as a Transceiver is allowed to send messages to the SMSC and receive
            messages from the SMSC over a single SMPP session </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.CommandSet">
            <summary> The CommandSet identifies the type of message the SMPP PDU represents
            5.1.2.1 table 5.1 </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.Unknown">
            <summary> Defined by us to be able to save unknown PDUs </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.GenericNack">
            <summary> Generic negative acknowledgement to an SMPP PDU submitted with an invalid message header </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.BindReceiver">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.BindReceiverResp">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.BindTransmitter">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.BindTransmitterResp">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.QuerySm">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.QuerySmResp">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.SubmitSm">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.SubmitSmResp">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.DeliverSm">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.DeliverSmResp">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.Unbind">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.UnbindResp">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.ReplaceSm">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.ReplaceSmResp">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.CancelSm">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.CancelSmResp">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.BindTransceiver">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.BindTransceiverResp">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.Outbind">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.EnquireLink">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.EnquireLinkResp">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.SubmitMultiSm">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.SubmitMultiSmResp">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.AlertNotification">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.DataSm">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandSet.DataSmResp">
            <summary></summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.CommandStatus">
            <summary> CommandStatus of an SMPP message response indicates the success or failure of an SMPP request.
            5.1.3 table 5.2 </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.Unknown">
            <summary> Defined by us to be able to save unknown PDUs </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_ROK">
            <summary> No Error </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVMSGLEN">
            <summary> Message Length is invalid </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVCMDLEN">
            <summary> Command Length is invalid </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVCMDID">
            <summary> Invalid Command ID </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVBNDSTS">
            <summary> Incorrect BIND Status for given command </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RALYBND">
            <summary> ESME Already in Bound State </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVPRTFLG">
            <summary> Invalid Priority Flag </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVREGDLVFLG">
            <summary> Invalid Registered Delivery Flag </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RSYSERR">
            <summary> System Error </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVSRCADR">
            <summary> Invalid Source Address </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVDSTADR">
            <summary> Invalid Dest Addr </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVMSGID">
            <summary> Message ID is invalid </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RBINDFAIL">
            <summary> Bind Failed </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVPASWD">
            <summary> Invalid Password </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVSYSID">
            <summary> Invalid System ID </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RCANCELFAIL">
            <summary> Cancel SM Failed </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RREPLACEFAIL">
            <summary> Replace SM Failed </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RMSGQFUL">
            <summary> Message Queue Full </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVSERTYP">
            <summary> Invalid Service Type </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVNUMDESTS">
            <summary> Invalid number of destinations </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVDLNAME">
            <summary> Invalid Distribution List name </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVDESTFLAG">
            <summary> Destination flag is invalid (submit_multi) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVSUBREP">
            <summary> Invalid "submit with replace" request(i.e. submit_sm with replace_if_present_flag set) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVESMCLASS">
            <summary> Invalid esm_class field data </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RCNTSUBDL">
            <summary> Cannot Submit to Distribution List </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RSUBMITFAIL">
            <summary> Submit_sm or submit_multi failed </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVSRCTON">
            <summary> Invalid Source address TON </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVSRCNPI">
            <summary> Invalid Source address NPI </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVDSTTON">
            <summary> Invalid Destination address TON </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVDSTNPI">
            <summary> Invalid Destination address NPI </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVSYSTYP">
            <summary> Invalid system_type field </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVREPFLAG">
            <summary> Invalid replace_if_present flag </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVNUMMSGS">
            <summary> Invalid number of messages </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RTHROTTLED">
            <summary> Throttling error (ESME has exceeded allowed message limits) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVSCHED">
            <summary> Invalid Scheduled Delivery Time </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVEXPIRY">
            <summary> Invalid message validity period (Expiry time) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVDFTMSGID">
            <summary> Predefined Message Invalid or Not Found </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RX_T_APPN">
            <summary> ESME Receiver Temporary App Error Code </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RX_P_APPN">
            <summary> ESME Receiver Permanent App Error Code </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RX_R_APPN">
            <summary> ESME Receiver Reject Message Error Code </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RQUERYFAIL">
            <summary> QUERY_SM request failed </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVOPTPARSTREAM">
            <summary> Error in the optional part of the PDU Body </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_ROPTPARNOTALLWD">
            <summary> Optional Parameter not allowed </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVPARLEN">
            <summary> Invalid Parameter Length </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RMISSINGOPTPARAM">
            <summary> Expected Optional Parameter missing </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RINVOPTPARAMVAL">
            <summary> Invalid Optional Parameter Value </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RDELIVERYFAILURE">
            <summary> Delivery Failure (used fordata_sm_resp) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.ESME_RUNKNOWNERR">
            <summary> Unknown Error </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.SMPPCLIENT_UNEXPRESP">
            <summary> SMPP Client Unexpected Response </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.SMPPCLIENT_RCVTIMEOUT">
            <summary> SMPP Client Receive Timeout </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.SMPPCLIENT_NOCONN">
            <summary> SMPP Client No Connection </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.SMPPCLIENT_UNBOUND">
            <summary> SMPP Client Unbound </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.SMPPCLIENT_GENERIC_NACK">
            <summary> SMPP Client generic negative acknowledgement </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.SMPPCLIENT_UNKNOWNERROR">
            <summary> SMPP Client Unknown Error </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.CommandStatus.SMPPCLIENT_NOTREQUIRED">
            <summary> SMPP Client Not required to perform operation </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.Ton">
            <summary> Type of Number (TON) used in the SME address parameters
            5.2.5 table 5.3 </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Ton.Unknown">
            <summary> Unknown </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Ton.International">
            <summary> International </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Ton.National">
            <summary> National </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Ton.NetworkSpecific">
            <summary> NetworkSpecific </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Ton.SubscriberNumber">
            <summary> SubscriberNumber</summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Ton.Alphanumeric">
            <summary> Alphanumeric </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Ton.Abbreviated">
            <summary> Abbreviated </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.Npi">
            <summary> Numeric Plan Indicator (NPI) used in the SME address parameters.
            5.2.6 table 5.4 </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Npi.Unknown">
            <summary> Unknown </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Npi.ISDN">
            <summary> ISDN </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Npi.DataX121">
            <summary> DataX121 </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Npi.TelexF69">
            <summary> TelexF69 </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Npi.LandMobileE212">
            <summary> LandMobileE212 </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Npi.National">
            <summary> National </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Npi.Private">
            <summary> Private </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Npi.ERMES">
            <summary> ERMES </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Npi.Internet">
            <summary> Internet </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Npi.WAP">
            <summary> WAP </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.MessageModes">
            <summary> Messaging Modes (bits 1-0 of esm_class) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageModes.Default">
            <summary> Default SMSC Mode (e.g. Store and Forward) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageModes.Datagram">
            <summary> Datagram mode </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageModes.Forward">
            <summary> Forward (i.e. Transaction) mode </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageModes.StoreForward">
            <summary> Store and Forward mode </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.MessageTypes">
            <summary> Messaging Types (bits 5-2 of esm_class) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageTypes.Default">
            <summary> Default message Type (i.e. normal message) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageTypes.SMEDeliveryAcknowledgement">
            <summary> (ESME -> SMSC)
            Short Message contains ESME Delivery Acknowledgement
            (SMSC -> ESME)
            Short Message contains SME Delivery Acknowledgement </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageTypes.SMEManualAcknowledgement">
            <summary> (ESME -> SMSC)
            Short Message contains ESME Manual/User Acknowledgement
            (SMSC -> ESME)
            Short Message contains SME Manual/User Acknowledgment </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageTypes.SMSCDeliveryReceipt">
            <summary> (SMSC -> ESME)
            Short Message contains SMSC Delivery Receipt </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageTypes.ConversationAbort">
            <summary> (SMSC -> ESME)
            Short Message contains Conversation Abort (Korean CDMA) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageTypes.IntermediateDeliveryNotification">
            <summary> (SMSC -> ESME)
            Short Message contains Intermediate Delivery Notification </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.GSMSpecificFeatures">
            <summary> GSM Network Specific Features (bits 7-6 of esm_class) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.GSMSpecificFeatures.No">
            <summary> No specific features selected </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.GSMSpecificFeatures.UDHI">
            <summary> UDHI Indicator set </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.GSMSpecificFeatures.ReplyPath">
            <summary> Set Reply Path (only relevant for GSM network) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.GSMSpecificFeatures.UDHIandReplyPath">
            <summary> Set UDHI and Reply Path (only relevant for GSM network) </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SMSCDeliveryReceipt">
            <summary> SMSC Delivery Receipt (bits 1 and 0 of registered_delivery) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SMSCDeliveryReceipt.NotRequested">
            <summary> No SMSC Delivery Receipt requested (default) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SMSCDeliveryReceipt.SuccessFailure">
            <summary> SMSC Delivery Receipt requested where final delivery outcome is delivery success or failure </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SMSCDeliveryReceipt.Failure">
            <summary> SMSC Delivery Receipt requested where the final delivery outcome is delivery failure </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SMEAcknowledgement">
            <summary> SME originated Acknowledgement (bits 3 and 2 of registered_delivery) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SMEAcknowledgement.NotRequested">
            <summary> No recipient SME acknowledgment requested (default) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SMEAcknowledgement.Delivery">
            <summary> SME Delivery Acknowledgement requested </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SMEAcknowledgement.Manual">
            <summary> SME Manual/User Acknowledgment requested </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SMEAcknowledgement.DeliveryManual">
            <summary> Both Delivery and Manual/User Acknowledgment requested </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.IntermediateNotification">
            <summary> Intermediate Notification (bit 5 of registered_delivery) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.IntermediateNotification.NotRequested">
            <summary> No Intermediate notification requested (default) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.IntermediateNotification.Requested">
            <summary> Intermediate notification requested </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.MessageState">
            <summary> States for a short message </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageState.None">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageState.Enroute">
            <summary> The message is in enroute state </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageState.Delivered">
            <summary> Message is delivered to destination </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageState.Expired">
            <summary> Message validity period has expired </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageState.Deleted">
            <summary> Message has been deleted </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageState.Undeliverable">
            <summary> Message is undeliverable </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageState.Accepted">
            <summary> Message is in accepted state 
            (i.e. has been manually read on behalf of the subscriber by customer service) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageState.Unknown">
            <summary> Message is in invalid state </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.MessageState.Rejected">
            <summary> Message is in a rejected state </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.DestinationAddressType">
            <summary> Identifies whether destination address is a Distribution List Name or SME address </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DestinationAddressType.SMEAddress">
            <summary> SME Address </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DestinationAddressType.DistributionListName">
            <summary> Distribution List Name </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SubmitMode">
            <summary> Identifies the way how to send user data in the submit_sm PDU </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SubmitMode.ShortMessage">
            <summary> Send user data in the short_message field </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SubmitMode.Payload">
            <summary> Send user data in the optional parameter message_payload </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.DeliverMode">
            <summary> Identifies the way how to send user data in the deliver_sm PDU </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DeliverMode.ShortMessage">
            <summary> Send user data in the short_message field </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.DeliverMode.Payload">
            <summary> Send user data in the optional parameter message_payload </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.InformationElementIdentifiers">
            <summary> Identifies Information Element in the User Data Header </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.ConcatenatedShortMessages8bit">
            <summary> Concatenated short messages, 8-bit reference number </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.SpecialSMSMessageIndication">
            <summary> Special SMS Message Indication </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.ApplicationPortAddressingScheme8bit">
            <summary> Application port addressing scheme, 8 bit address </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.ApplicationPortAddressingScheme16bit">
            <summary> Application port addressing scheme, 16 bit address </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.SMSCControlParameters">
            <summary> SMSC Control Parameters </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.UDHSourceIndicator">
            <summary> UDH Source Indicator </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.ConcatenatedShortMessage16bit">
            <summary> Concatenated short message, 16-bit reference number </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.WirelessControlMessageProtocol">
            <summary> Wireless Control Message Protocol </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.TextFormatting">
            <summary> Text Formatting </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.PredefinedSound">
            <summary> Predefined Sound </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.UserDefinedSound">
            <summary> User Defined Sound (iMelody max 128 bytes) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.PredefinedAnimation">
            <summary> Predefined Animation </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.LargeAnimation">
            <summary> Large Animation (16*16 times 4 = 32*4 =128 bytes) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.SmallAnimation">
            <summary> Small Animation (8*8 times 4 = 8*4 =32 bytes) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.LargePicture">
            <summary> Large Picture (32*32 = 128 bytes) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.SmallPicture">
            <summary> Small Picture (16*16 = 32 bytes) </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.VariablePicture">
            <summary> Variable Picture </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.UserPromptIndicator">
            <summary> User prompt indicator </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.ExtendedObject">
            <summary> Extended Object </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.ReusedExtendedObject">
            <summary> Reused Extended Object </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.CompressionControl">
            <summary> Compression Control </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.ObjectDistributionIndicator">
            <summary> Object Distribution Indicator </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.StandardWvgObject">
            <summary> Standard WVG object </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.CharacterSizeWvgObject">
            <summary> Character Size WVG object </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.ExtendedObjectDataRequestCommand">
            <summary> Extended Object Data Request Command </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.EMailHeader">
            <summary> RFC 822 E-Mail Header </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.HyperlinkFormatElement">
            <summary> Hyperlink format element </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.ReplyAddressElement">
            <summary> Reply Address Element </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.EnhancedVoiceMailInformation">
            <summary> Enhanced Voice Mail Information </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.InformationElementIdentifiers.Unknown">
            <summary> Unknown </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.OptionalTags">
            <summary> Identifes the Tag field that used to uniquely identify the particular optional parameter </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.DestAddrSubunit">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.DestNetworkType">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.DestBearerType">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.DestTelematicsId">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.SourceAddrSubunit">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.SourceNetworkType">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.SourceBearerType">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.SourceTelematicsId">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.QosTimeToLive">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.PayloadType">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.AdditionalStatusInfoText">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.ReceiptedMessageId">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.MsMsgWaitFacilities">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.PrivacyIndicator">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.SourceSubaddress">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.DestSubaddress">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.UserMessageReference">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.UserResponseCode">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.SourcePort">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.DestinationPort">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.SarMsgRefNum">
            <summary> The sar_msg_ref_num parameter is used to indicate the reference number for a particular concatenated short message </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.LanguageIndicator">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.SarTotalSegments">
            <summary> The sar_total_segments parameter is used to indicate the total number of short messages within the concatenated short message </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.SarSegmentSeqnum">
            <summary> The sar_segment_seqnum parameter is used to indicate the sequence number of a particular short message within the concatenated short message </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.SCInterfaceVersion">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.CallbackNumPresInd">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.CallbackNumAtag">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.NumberOfMessages">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.CallbackNum">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.DpfResult">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.SetDpf">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.MsAvailabilityStatus">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.NetworkErrorCode">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.MessagePayload">
            <summary> Message_payload parameter contains the user data </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.DeliveryFailureReason">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.MoreMessagesToSend">
            <summary> The more_messages_to_send parameter is used by the ESME in the submit_sm and data_sm operations to indicate to the SMSC that there are further messages for the same destination SME. The SMSC may use this setting for network resource optimization </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.MessageState">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.UssdServiceOp">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.DisplayTime">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.SmsSignal">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.MsValidity">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.AlertOnMessageDelivery">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.ItsReplyType">
            <summary></summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.OptionalTags.ItsSessionInfo">
            <summary></summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.LogEventNotificationTypes">
            <summary> Internal Log Event types </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.LogEventNotificationTypes.None">
            <summary> Standard Write </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.LogEventNotificationTypes.Email">
            <summary> Send an email alert as well as write the log </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ConnectionEventTypes">
            <summary> Internal connection event type </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ConnectionEventTypes.Connected">
            <summary> Connection Established </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ConnectionEventTypes.ConnectionAttemptFailed">
            <summary> Conntion Attempt Has Failed </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ConnectionEventTypes.Bound">
            <summary> Connection Is Bound </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ConnectionEventTypes.BindingAttemptFailed">
            <summary> Binding Attempt Failed </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ConnectionEventTypes.UnBound">
            <summary> Connection is UnBound</summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ConnectionEventTypes.Disconnected">
            <summary> Disconnected </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.PduDirectionTypes">
            <summary> Used to flag if the pdu was received or sent </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.PduDirectionTypes.Received">
            <summary> The PDU has been received from the end point </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.PduDirectionTypes.Sent">
            <summary> The PDU was sent from ourselves </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.CancelSm">
            <summary> Cancel previously submitted short message that is still pending delivery </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.CancelSm.ServiceType">
            <summary> Application service associated with the message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.CancelSm.MessageId">
            <summary> The id of the message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.CancelSm.SourceTon">
            <summary> Source address type of number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.CancelSm.SourceNpi">
            <summary> Source address numbering plan indicator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.CancelSm.SourceAddr">
            <summary> Source phone number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.CancelSm.DestTon">
            <summary> Destination address type of number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.CancelSm.DestNpi">
            <summary> Destination address numbering plan indicator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.CancelSm.DestAddr">
            <summary> Destination phone number </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.CancelSm.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.CancelSm.#ctor(ArdanStudios.Common.SmppClient.DataCodings,System.String,System.String,System.Byte,System.Byte,System.String,System.Byte,System.Byte,System.String)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="serviceType"></param>
            <param name="messageId"></param>
            <param name="srcTon"></param>
            <param name="srcNpi"></param>
            <param name="srcAddr"></param>
            <param name="dstTon"></param>
            <param name="dstNpi"></param>
            <param name="dstAddr"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.CancelSm.Create(ArdanStudios.Common.SmppClient.DataCodings,System.String,System.String,System.Byte,System.Byte,System.String,System.Byte,System.Byte,System.String)">
            <summary> Called to create a CancelSm object </summary>
            <param name="defaultEncoding"></param>
            <param name="serviceType"></param>
            <param name="messageId"></param>
            <param name="srcTon"></param>
            <param name="srcNpi"></param>
            <param name="srcAddr"></param>
            <param name="dstTon"></param>
            <param name="dstNpi"></param>
            <param name="dstAddr"></param>
            <returns> CancelSm </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.CancelSm.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a CancelSm object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> CancelSm </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.CancelSm.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.CancelSm.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.CancelSmResp">
            <summary> Represents the response to the cancel_sm PDU </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.CancelSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.CancelSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.CancelSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.CancelSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus)">
            <summary> Called to create a CancelSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.CancelSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CancelSm,ArdanStudios.Common.SmppClient.CommandStatus)">
            <summary> Called to create a CancelSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="cancelSm"></param>
            <param name="status"></param>
            <returns> CancelSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.CancelSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Called to create a DataSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="status"></param>
            <param name="sequence"></param>
            <returns> CancelSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.CancelSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a CancelSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> CancelSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.CancelSmResp.Details">
            <summary> Called to return a list of property details from the PDU </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.CancelSmResp.ArdanStudios#Common#SmppClient#IPacket#GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.Data.PduData">
            <summary> Provides access to the pdu releated database tables </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.Data.PduData.Insert(ArdanStudios.Common.Data.DataTransaction,System.String,System.Int32,ArdanStudios.Common.SmppClient.PduDirectionTypes,System.Int64,ArdanStudios.Common.SmppClient.CommandSet,ArdanStudios.Common.SmppClient.CommandStatus,System.Int64,System.Collections.Generic.List{ArdanStudios.Common.SmppClient.PduPropertyDetail},System.Collections.Generic.List{System.Byte[]})">
            <summary> Called to save a pdu into the database </summary>
            <param name="dataTransaction"></param>
            <param name="logKey"></param>
            <param name="smscServiceId"></param>
            <param name="pduDirectionType"></param>
            <param name="commandLength"></param>
            <param name="commandSet"></param>
            <param name="commandStatus"></param>
            <param name="sequenceNumber"></param>
            <param name="details"></param>
            <param name="pduDataBlocks"></param>
            <returns> long </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEConnection">
            <summary> Manages a single ESME (Extended Short Message Entity) connection </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEConnection.RECEIVED_MESSAGE_HANDLER">
            <summary> Called when a message is received </summary>
            <param name="logKey"></param>
            <param name="serviceType"></param>
            <param name="sourceTon"></param>
            <param name="sourceNpi"></param>
            <param name="shortLongCode"></param>
            <param name="dateReceived"></param>
            <param name="phoneNumber"></param>
            <param name="dataCoding"></param>
            <param name="message"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEConnection.RECEIVED_GENERICNACK_HANDLER">
            <summary> Called when a submit message is acknowledged </summary>
            <param name="logKey"></param>
            <param name="sequence"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEConnection.SUBMIT_MESSAGE_HANDLER">
            <summary> Called when a submit message is acknowledged </summary>
            <param name="logKey"></param>
            <param name="sequence"></param>
            <param name="messageId"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEConnection.QUERY_MESSAGE_HANDLER">
            <summary> Called when a query message is responded </summary>
            <param name="logKey"></param>
            <param name="sequence"></param>
            <param name="messageId"></param>
            <param name="finalDate"></param>
            <param name="messageState"></param>
            <param name="errorCode"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEConnection.LOG_EVENT_HANDLER">
            <summary> Called to log an event </summary>
            <param name="logEventNotificationType"></param>
            <param name="shortLongCode"></param>
            <param name="message"></param>
            <param name="logKey"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEConnection.CONNECTION_EVENT_HANDLER">
            <summary> Called when a connection event occurrs </summary>
            <param name="logKey"></param>
            <param name="connectionEventType"></param>
            <param name="message"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEConnection.PDU_DETAILS_EVENT_HANDLER">
            <summary> Called to capture the details of the pdu </summary>
            <param name="logKey"></param>
            <param name="pduDirectionType"></param>
            <param name="pdu"></param>
            <param name="details"></param>
            <returns> External Id </returns>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.Disposed">
            <summary> Flag that determines whether this instance has been disposed or not yet </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.ConnectionId">
            <summary> A unique id for logging </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.ShortLongCode">
            <summary> The short/long code being managed </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.ConnectionMode">
            <summary> The connection mode, Transceiver, Transmitter, Receiver</summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.Host">
            <summary> The host or ipaddress to connect to </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.Port">
            <summary> The port to connect to on the server </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.UserName">
            <summary> The username to authenticate </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.Password">
            <summary> The password to authenticate </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.LogKey">
            <summary> The logKey for writing logs to the correct files </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.ReceivedMessageHandler">
            <summary> A user supplied method to call when a message is received </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.ReceivedGenericNackHandler">
            <summary> A user supplied method to call when a generic nack is received </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.SubmitMessageHandler">
            <summary> A user supplied method to call when a submit is ascknowledged </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.QueryMessageHandler">
            <summary> A user supplied method to call when a query is responded </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.LogEventHandler">
            <summary> A user supplied method to call to write logs </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.ConnectionEventHandler">
            <summary> A user supplied method to call for connection events </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.PduDetailsEventHandler">
            <summary> A user supplied method to call for pdu detail data </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.Client">
            <summary> The SMPP Client object </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.ConnectionThread">
            <summary> Handle to the thread trying to connect to the server </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.ConnectEvent">
            <summary> An event to tell the connection thread to connect </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.Collector">
            <summary> Dictionary of packet data from cell phones </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEConnection.IsBound">
            <summary> Keeps track of the number of bind errors </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.ESMEConnection.ConnectionIdentifier">
            <summary> The unique connection id </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.ESMEConnection.Status">
            <summary> The current status of the connection </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.#ctor(System.Int32,System.String,ArdanStudios.Common.SmppClient.ConnectionModes,System.String,System.Int32,System.String,System.String,System.String,ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.ESMEConnection.CONNECTION_EVENT_HANDLER,ArdanStudios.Common.SmppClient.ESMEConnection.RECEIVED_MESSAGE_HANDLER,ArdanStudios.Common.SmppClient.ESMEConnection.RECEIVED_GENERICNACK_HANDLER,ArdanStudios.Common.SmppClient.ESMEConnection.SUBMIT_MESSAGE_HANDLER,ArdanStudios.Common.SmppClient.ESMEConnection.QUERY_MESSAGE_HANDLER,ArdanStudios.Common.SmppClient.ESMEConnection.LOG_EVENT_HANDLER,ArdanStudios.Common.SmppClient.ESMEConnection.PDU_DETAILS_EVENT_HANDLER)">
            <summary> Constructor For ESMS mode </summary>
            <param name="connectionId"></param>
            <param name="shortLongCode"></param>
            <param name="connectionMode"></param>
            <param name="host"></param>
            <param name="port"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="logKey"></param>
            <param name="defaultEncoding"></param>
            <param name="connectionEventHandler"></param>
            <param name="receivedMessageHandler"></param>
            <param name="receivedGenericNackHandler"></param>
            <param name="submitMessageHandler"></param>
            <param name="queryMessageHandler"></param>
            <param name="logEventHandler"></param>
            <param name="pduDetailsEventHandler"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.Dispose">
            <summary> Dispose </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.Dispose(System.Boolean)">
            <summary> Dispose </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.WriteLog(System.String)">
            <summary> Called to write out to the log </summary>
            <param name="message"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.WriteLog(System.String,System.Object[])">
            <summary> Called to write out to the log </summary>
            <param name="message"></param>
            <param name="logValues"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.WriteLog(ArdanStudios.Common.SmppClient.LogEventNotificationTypes,System.String)">
            <summary> Called to write out to the log </summary>
            <param name="logEventNotificationType"></param>
            <param name="message"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.WriteLog(ArdanStudios.Common.SmppClient.LogEventNotificationTypes,System.String,System.Object[])">
            <summary> Called to write out to the log </summary>
            <param name="logEventNotificationType"></param>
            <param name="message"></param>
            <param name="logValues"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.PerformConnectClient">
            <summary> Called to connect to the server </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.Connect">
            <summary> Called to connect to the SMPP server </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.Disconnect">
            <summary> Called to disconnect to the SMPP server </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.Bind">
            <summary> Called to authenticate the system </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.UnBind">
            <summary> Called to logoff the system </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.AddMessageSegmentToCollector(ArdanStudios.Common.SmppClient.DeliverSm)">
            <summary> Called to add the message segment to the collector dictionary </summary>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.IsLastSegment(ArdanStudios.Common.SmppClient.DeliverSm)">
            <summary> Called to verify we received the last segment of data </summary>
            <param name="data"></param>
            <returns> True or False </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.RetrieveFullMessage(ArdanStudios.Common.SmppClient.DeliverSm)">
            <summary> Called to retrieve the full message </summary>
            <param name="data"></param>
            <returns> The message </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.SendMessage(System.String,System.String,ArdanStudios.Common.SmppClient.Ton,ArdanStudios.Common.SmppClient.Npi,ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.DataCodings,System.String,ArdanStudios.Common.SmppClient.SubmitSm@,ArdanStudios.Common.SmppClient.SubmitSmResp@)">
            <summary> Called to send the message </summary>
            <param name="phoneNumber"></param>
            <param name="serviceType"></param>
            <param name="destinationTon"></param>
            <param name="destinationNpi"></param>
            <param name="submitDataCoding"></param>
            <param name="encodeDataCoding"></param>
            <param name="message"></param>
            <param name="submitSm"></param>
            <param name="submitSmResp"></param>
            <returns> 0 - Successful / 1 - Failed / 2 - Not Connected </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.SendMessageLarge(System.String,System.String,ArdanStudios.Common.SmppClient.Ton,ArdanStudios.Common.SmppClient.Npi,ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.DataCodings,System.String,System.Collections.Generic.List{ArdanStudios.Common.SmppClient.SubmitSm}@,System.Collections.Generic.List{ArdanStudios.Common.SmppClient.SubmitSmResp}@)">
            <summary> Called to send the message </summary>
            <param name="phoneNumber"></param>
            <param name="serviceType"></param>
            <param name="destinationTon"></param>
            <param name="destinationNpi"></param>
            <param name="submitDataCoding"></param>
            <param name="encodeDataCoding"></param>
            <param name="message"></param>
            <param name="submitSmList"></param>
            <param name="submitSmRespList"></param>
            <returns> 0 - Successful / 1 - Failed / 2 - Not Connected </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.SendQuery(System.String)">
            <summary> Called to send a query </summary>
            <param name="messageId"></param>
            <returns> 1 - Successful / 0 - Failed </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.ClientEventConnect(System.Object,System.Boolean)">
            <summary> Called when a connection is established </summary>
            <param name="sender"></param>
            <param name="bSuccess"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.ClientEventDisconnect(System.Object)">
            <summary> Called when a disconnect occurs </summary>
            <param name="sender"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.ClientEventDeliverSm(System.Object,ArdanStudios.Common.SmppClient.DeliverSm)">
            <summary> Called when a message is received from the SMPP server </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.ClientEventSubmitSmResp(System.Object,ArdanStudios.Common.SmppClient.SubmitSmResp)">
            <summary> Called when the SMPP Server receives a sent message </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.ClientEventQuerySmResp(System.Object,ArdanStudios.Common.SmppClient.QuerySmResp)">
            <summary> Called when the SMPP query is returned </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.ClientEventEnquireLinkSm(System.Object,ArdanStudios.Common.SmppClient.EnquireLinkSm)">
            <summary> Called when an enquire link is received </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.ClientEventEnquireLinkSmResp(System.Object,ArdanStudios.Common.SmppClient.EnquireLinkSmResp)">
            <summary> Called when an enquire link resp is received </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.ClientEventGenericNackSm(System.Object,ArdanStudios.Common.SmppClient.GenericNackSm)">
            <summary> Called when a generic nack is received </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.ClientEventError(System.Object,System.String,System.Exception)">
            <summary> Called when an error occurs </summary>
            <param name="sender"></param>
            <param name="comment"></param>
            <param name="ex"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.ClientEventUnBindSm(System.Object,ArdanStudios.Common.SmppClient.UnBindSm)">
            <summary> Called when an unbind command is complete </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEConnection.ClientEventPduDetails(System.Object,ArdanStudios.Common.SmppClient.PduDirectionTypes,ArdanStudios.Common.SmppClient.Header,System.Collections.Generic.List{ArdanStudios.Common.SmppClient.PduPropertyDetail})">
            <summary> Called when a pdu details are available </summary>
            <param name="send"></param>
            <param name="pduDirectionType"></param>
            <param name="pdu"></param>
            <param name="details"></param>
            <returns> External Id </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEManager">
            <summary> Provides ESME (Extended Short Message Entity) Management </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEManager.RECEIVED_MESSAGE_HANDLER">
            <summary> Called when a message is received </summary>
            <param name="logKey"></param>
            <param name="serviceType"></param>
            <param name="sourceTon"></param>
            <param name="sourceNpi"></param>
            <param name="shortLongCode"></param>
            <param name="dateReceived"></param>
            <param name="phoneNumber"></param>
            <param name="dataCoding"></param>
            <param name="message"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEManager.RECEIVED_GENERICNACK_HANDLER">
            <summary> Called when a submit message is acknowledged </summary>
            <param name="logKey"></param>
            <param name="sequence"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEManager.SUBMIT_MESSAGE_HANDLER">
            <summary> Called when a submit message is acknowledged </summary>
            <param name="logKey"></param>
            <param name="sequence"></param>
            <param name="messageId"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEManager.QUERY_MESSAGE_HANDLER">
            <summary> Called when a query message is responded </summary>
            <param name="logKey"></param>
            <param name="sequence"></param>
            <param name="messageId"></param>
            <param name="finalDate"></param>
            <param name="messageState"></param>
            <param name="errorCode"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEManager.LOG_EVENT_HANDLER">
            <summary> Called to log an event </summary>
            <param name="logEventNotificationType"></param>
            <param name="shortLongCode"></param>
            <param name="message"></param>
            <param name="logKey"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEManager.CONNECTION_EVENT_HANDLER">
            <summary> Called when a connection event occurrs </summary>
            <param name="logKey"></param>
            <param name="connectionEventType"></param>
            <param name="message"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.ESMEManager.PDU_DETAILS_EVENT_HANDLER">
            <summary> Called to capture the details of the pdu </summary>
            <param name="logKey"></param>
            <param name="pduDirectionType"></param>
            <param name="pdu"></param>
            <param name="details"></param>
            <returns> External Id </returns>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEManager.Disposed">
            <summary> Flag that determines whether this instance has been disposed or not yet </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEManager.LogKey">
            <summary> The logKey for writing logs to the correct files </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEManager.ShortLongCode">
            <summary> The short/long code being managed </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEManager.ReceivedMessageHandler">
            <summary> A user supplied method to call when a message is received </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEManager.ReceivedGenericNackHandler">
            <summary> A user supplied method to call when a generic nack is received </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEManager.SubmitMessageHandler">
            <summary> A user supplied method to call when a submit is ascknowledged </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEManager.QueryMessageHandler">
            <summary> A user supplied method to call when a query is responded </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEManager.LogEventHandler">
            <summary> A user supplied method to call to write logs </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEManager.ConnectionEventHandler">
            <summary> A user supplied method to call for connection events </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEManager.PduDetailsEventHandler">
            <summary> A user supplied method to call for pdu detail data </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEManager.Receivers">
            <summary> A list of receiver connections </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEManager.Transmitters">
            <summary> A dictionary of transmitter connections </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.ESMEManager.NextTransmitter">
            <summary> A pointer to the next transmitter to use </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.#ctor(System.String,System.String,ArdanStudios.Common.SmppClient.ESMEManager.CONNECTION_EVENT_HANDLER,ArdanStudios.Common.SmppClient.ESMEManager.RECEIVED_MESSAGE_HANDLER,ArdanStudios.Common.SmppClient.ESMEManager.RECEIVED_GENERICNACK_HANDLER,ArdanStudios.Common.SmppClient.ESMEManager.SUBMIT_MESSAGE_HANDLER,ArdanStudios.Common.SmppClient.ESMEManager.QUERY_MESSAGE_HANDLER,ArdanStudios.Common.SmppClient.ESMEManager.LOG_EVENT_HANDLER,ArdanStudios.Common.SmppClient.ESMEManager.PDU_DETAILS_EVENT_HANDLER)">
            <summary> Contructor </summary>
            <param name="logKey"></param>
            <param name="shortLongCode"></param>
            <param name="connectionEventHandler"></param>
            <param name="receivedMessageHandler"></param>
            <param name="receivedGenericNackHandler"></param>
            <param name="submitMessageHandler"></param>
            <param name="queryMessageHandler"></param>
            <param name="logEventHandler"></param>
            <param name="pduDetailsEventHandler"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.Dispose">
            <summary> Dispose </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.Dispose(System.Boolean)">
            <summary> Dispose </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.WriteLog(System.String)">
            <summary> Called to write out to the log </summary>
            <param name="message"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.WriteLog(System.String,System.Object[])">
            <summary> Called to write out to the log </summary>
            <param name="message"></param>
            <param name="logValues"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.WriteLog(ArdanStudios.Common.SmppClient.LogEventNotificationTypes,System.String)">
            <summary> Called to write out to the log </summary>
            <param name="logEventNotificationType"></param>
            <param name="message"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.WriteLog(ArdanStudios.Common.SmppClient.LogEventNotificationTypes,System.String,System.Object[])">
            <summary> Called to write out to the log </summary>
            <param name="logEventNotificationType"></param>
            <param name="message"></param>
            <param name="logValues"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.ConnectionEventConnectionHandler(System.String,ArdanStudios.Common.SmppClient.ConnectionEventTypes,System.String)">
            <summary> Called when a connection event is fired </summary>
            <param name="logKey"></param>
            <param name="connectionEventType"></param>
            <param name="message"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.ReceivedMessageConnectionHandler(System.String,System.String,ArdanStudios.Common.SmppClient.Ton,ArdanStudios.Common.SmppClient.Npi,System.String,System.DateTime,System.String,ArdanStudios.Common.SmppClient.DataCodings,System.String)">
            <summary> Called when a message is received on a connection </summary>
            <param name="logKey"></param>
            <param name="serviceType"></param>
            <param name="sourceTon"></param>
            <param name="sourceNpi"></param>
            <param name="shortLongCode"></param>
            <param name="dateReceived"></param>
            <param name="phoneNumber"></param>
            <param name="dataCoding"></param>
            <param name="message"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.ReceivedGenericNackConnectionHandler(System.String,System.Int32)">
            <summary> A user supplied method to call when a generic nack is received </summary>
            <param name="logKey"></param>
            <param name="sequence"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.SubmitMessageConnectionHandler(System.String,System.Int32,System.String)">
            <summary> Called when a submit message is acknowledged </summary>
            <param name="logKey"></param>
            <param name="sequence"></param>
            <param name="messageId"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.QueryMessageConnectionHandler(System.String,System.Int32,System.String,System.DateTime,System.Int32,System.Int64)">
            <summary> Called when a query message is responded </summary>
            <param name="logKey"></param>
            <param name="sequence"></param>
            <param name="messageId"></param>
            <param name="finalDate"></param>
            <param name="messageState"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.LogEventConnectionHandler(ArdanStudios.Common.SmppClient.LogEventNotificationTypes,System.String,System.String,System.String)">
            <summary> Called to log an event </summary>
            <param name="logEventNotificationType"></param>
            <param name="shortLongCode"></param>
            <param name="message"></param>
            <param name="logKey"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.PduDetailsConnectionHandler(System.String,ArdanStudios.Common.SmppClient.PduDirectionTypes,ArdanStudios.Common.SmppClient.Header,System.Collections.Generic.List{ArdanStudios.Common.SmppClient.PduPropertyDetail})">
            <summary> Called when a pdu details are available </summary>
            <param name="logKey"></param>
            <param name="pduDirectionType"></param>
            <param name="pdu"></param>
            <param name="details"></param>
            <returns> External Id </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.AddTransceiverConnection(System.Int32,System.String,System.Int32,System.String,System.String,System.String,ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to add a transceiver connection </summary>
            <param name="connectionId"></param>
            <param name="host"></param>
            <param name="port"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="logKey"></param>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.AddReceiverConnection(System.Int32,System.String,System.Int32,System.String,System.String,System.String,ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to add a receiver connection </summary>
            <param name="connectionId"></param>
            <param name="host"></param>
            <param name="port"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="logKey"></param>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.AddTransmitterConnection(System.Int32,System.String,System.Int32,System.String,System.String,System.String,ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to add a transmitter connection </summary>
            <param name="connectionId"></param>
            <param name="host"></param>
            <param name="port"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="logKey"></param>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.NextTransmitterConnection">
            <summary> Called to return the next transmitter for sending </summary>
            <returns> SmppConnection </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.AddConnections(System.Int32,ArdanStudios.Common.SmppClient.ConnectionModes,System.String,System.Int32,System.String,System.String,System.String,ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to add connections </summary>
            <param name="howMany"></param>
            <param name="connectionMode"></param>
            <param name="host"></param>
            <param name="port"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="logKey"></param>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.SendMessage(System.String,System.String,ArdanStudios.Common.SmppClient.Ton,ArdanStudios.Common.SmppClient.Npi,ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.DataCodings,System.String,ArdanStudios.Common.SmppClient.SubmitSm@,ArdanStudios.Common.SmppClient.SubmitSmResp@)">
            <summary> Called to send the message </summary>
            <param name="phoneNumber"></param>
            <param name="serviceType"></param>
            <param name="sourceTon"></param>
            <param name="sourceNpi"></param>
            <param name="submitDataCoding"></param>
            <param name="encodeDataCoding"></param>
            <param name="message"></param>
            <param name="submitSm"></param>
            <param name="submitSmResp"></param>
            <returns> 1 - Successful / 0 - Failed </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.SendMessageLarge(System.String,System.String,ArdanStudios.Common.SmppClient.Ton,ArdanStudios.Common.SmppClient.Npi,ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.DataCodings,System.String,System.Collections.Generic.List{ArdanStudios.Common.SmppClient.SubmitSm}@,System.Collections.Generic.List{ArdanStudios.Common.SmppClient.SubmitSmResp}@)">
            <summary> Called to send the message </summary>
            <param name="phoneNumber"></param>
            <param name="serviceType"></param>
            <param name="sourceTon"></param>
            <param name="sourceNpi"></param>
            <param name="submitDataCoding"></param>
            <param name="encodeDataCoding"></param>
            <param name="message"></param>
            <param name="submitSmList"></param>
            <param name="submitSmRespList"></param>
            <returns> 1 - Successful / 0 - Failed </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.ESMEManager.SendQuery(System.String)">
            <summary> Called to send a query </summary>
            <param name="messageId"></param>
            <returns> 1 - Successful / 0 - Failed </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.IPduDetails">
            <summary> IPduDetails Interface </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.IPduDetails.Details">
            <summary> Returns details about the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.DataTypes.SMSCPduDataBlocks">
            <summary> SQL Server Insert support </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataTypes.SMSCPduDataBlocks.#ctor(System.Collections.Generic.List{System.Byte[]})">
            <summary> Constructor </summary>
            <param name="pduDataBlocks"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataTypes.SMSCPduDataBlocks.System#Collections#Generic#IEnumerable{Microsoft#SqlServer#Server#SqlDataRecord}#GetEnumerator">
            <summary> Provides an enumerator for the list of PduPropertyDetails </summary>
            <returns> IEnumerator SqlDataRecord </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.DataTypes.PduPropertyDetails">
            <summary> Provides support for inserting pdu's into the sql server </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataTypes.PduPropertyDetails.#ctor(System.Collections.Generic.List{ArdanStudios.Common.SmppClient.PduPropertyDetail})">
            <summary> Constructor </summary>
            <param name="pduPropertyDetails"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataTypes.PduPropertyDetails.System#Collections#Generic#IEnumerable{Microsoft#SqlServer#Server#SqlDataRecord}#GetEnumerator">
            <summary> Provides an enumerator for the list of PduPropertyDetails </summary>
            <returns> IEnumerator SqlDataRecord </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.PduDataTypes">
            <summary> Set of possible data types for a pdu property </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.PduDataTypes.UInt">
            <summary> Unsigned Integer </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.PduDataTypes.UShort">
            <summary> Unsigned Short </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.PduDataTypes.Byte">
            <summary> Byte </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.PduDataTypes.ByteArray">
            <summary> Byte Array </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.PduDataTypes.CString">
            <summary> C String </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.PduDataTypes.EncodedString">
            <summary> Encoded String </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.PduPropertyDetail">
            <summary> Contains details for a single property in the PDU </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.PduPropertyDetail.StartingBytePosition">
            <summary> The starting byte position in the PDU for this property </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.PduPropertyDetail.PduDataType">
            <summary> The type of data </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.PduPropertyDetail.Name">
            <summary> The name of the property </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.PduPropertyDetail.DataBlock">
            <summary> The block of data for this property </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.PduPropertyDetail.ValueUInt">
            <summary> The unsigned int value </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.PduPropertyDetail.ValueUShort">
            <summary> The unsigned short value </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.PduPropertyDetail.ValueByte">
            <summary> The byte value </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.PduPropertyDetail.ValueString">
            <summary> The string value </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.PduPropertyDetail.#ctor(System.Int32,ArdanStudios.Common.SmppClient.PduDataTypes,System.String)">
            <summary> Constructor </summary>
            <param name="startingBytePosition"></param>
            <param name="pduDataType"></param>
            <param name="name"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.UnsuccessDestinationAddress">
            <summary> Represents SME address or/and Distribution name to which submission was unsuccessful </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.UnsuccessDestinationAddress.DestTon">
            <summary> Destination address type of number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.UnsuccessDestinationAddress.DestNpi">
            <summary> Destination address numbering plan indicator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.UnsuccessDestinationAddress.DestAddr">
            <summary> Destination phone number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.UnsuccessDestinationAddress.ErrorStatus">
            <summary> Indicates the success or failure of the request to this SME address </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnsuccessDestinationAddress.#ctor">
            <summary> Constructor </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnsuccessDestinationAddress.Create">
            <summary> Called to create a UnsuccessDestinationAddress object </summary>
            <returns> UnsuccessDestinationAddress </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SubmitMultiSmResp">
            <summary> Represents the response to the submit_multi PDU </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSmResp.MessageId">
            <summary> The id of the message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSmResp.UnsuccessDestinationAddresses">
            <summary> A list of destination addresses that were unsuccessful </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSmResp.Optional">
            <summary> Optional Parameters </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitMultiSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitMultiSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitMultiSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32,System.String)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
            <param name="messageId"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitMultiSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to create a SubmitMultiResp object </summary>
            <param name="defaultEncoding"></param>
            <returns> SubmitMultiResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitMultiSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Called to create a SubmitMultiResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="status"></param>
            <param name="sequence"></param>
            <returns> SubmitMultiResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitMultiSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SubmitMultiSm,ArdanStudios.Common.SmppClient.CommandStatus,System.String)">
            <summary> Called to create a DataSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="submitMultiSm"></param>
            <param name="commandStatus"></param>
            <param name="messageId"></param>
            <returns> SubmitMultiSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitMultiSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a SubmitMultiResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> SubmitMultiResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitMultiSmResp.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitMultiSmResp.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.DestinationAddress">
            <summary> Represents SME address or/and Distribution name </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DestinationAddress.DestType">
            <summary> Identifies whether destination address is a Distribution List name or SME address </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DestinationAddress.DestTon">
            <summary> Destination address type of number</summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DestinationAddress.DestNpi">
            <summary> Destination address numbering plan indicator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DestinationAddress.DestAddr">
            <summary> Destination phone number </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DestinationAddress.#ctor">
            <summary> Constructor </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DestinationAddress.Create">
            <summary> Called to create a DestinationAddress object </summary>
            <returns> DestinationAddress </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SubmitMultiSm">
            <summary> SubmitMulti PDU to submit an SMPP message for delivery to multiple
            recipients or to one or more Distribution Lists </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SubmitMultiSm._ValidityPeriod">
            <summary> Indicates how long the message is valid. Set to NULL to request the SMSC default validity period. Format 'YYMMDDhhmmsstnnp </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.ServiceType">
            <summary> Application service associated with the message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.SourceTon">
            <summary> Source address type of number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.SourceNpi">
            <summary> Source address numbering plan indicator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.SourceAddr">
            <summary> Source phone number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.DestinationAddresses">
            <summary> Contains one or more SME addresses or/and Distribution List names </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.EsmClass">
            <summary> Indicates Message Mode and Message Type </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.ProtocolId">
            <summary> Indicates which protocol to use </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.PriorityFlag">
            <summary> Indicate the priority level of the message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.ScheduleDeliveryTime">
            <summary> The date and time the message should be delivered. Set to NULL for immediate message delivery </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.ValidityPeriod">
            <summary> Indicates how long the message is valid. Set to NULL to request the SMSC default validity period. Format 'YYMMDDhhmmsstnnp </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.RegisteredDelivery">
            <summary> Indicator to signify if an SMSC delivery receipt or an SME acknowledgement is required </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.ReplaceIfPresent">
            <summary> Requests the SMSC to replace a previously submitted message, that is still pending delivery </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.DataCoding">
            <summary> Indicates the encoding scheme of the payload data </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.DefaultMsgId">
            <summary> Indicates the short message to send from a list of predefined (‘canned’) short messages stored on the SMSC. If not using an SMSC canned message, set to NULL </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.ShortMessageLength">
            <summary> Short Message data length </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.UserDataBuffer">
            <summary> The smpp data packet </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.UserData">
            <summary> The user data portion of the data packet </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.Optional">
            <summary> Optional Parameters </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.ShortMessage">
            <summary> Short message text in identified data coding </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.ShortMessageBytes">
            <summary> Up to 254 octets of short message user data. The exact physical limit for short_message size may vary according to the underlying network </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.MessageMode">
            <summary> Indicates message mode associated with the short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.MessageType">
            <summary> Indicates message type associated with the short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.MessageFeature">
            <summary> Indicates GSM Network Specific Features associated with the short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.SMSCReceipt">
            <summary> SMSC Delivery Receipt </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.Acknowledgement">
            <summary> SME originated Acknowledgement </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitMultiSm.Notification">
            <summary> Intermediate Notification </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitMultiSm.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitMultiSm.#ctor(ArdanStudios.Common.SmppClient.DataCodings,System.String,System.Byte,System.Byte,System.String,System.Collections.Generic.List{ArdanStudios.Common.SmppClient.DestinationAddress})">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="serviceType"></param>
            <param name="sourceTon"></param>
            <param name="sourceNpi"></param>
            <param name="sourceAddr"></param>
            <param name="destinationAddresses"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitMultiSm.Create(ArdanStudios.Common.SmppClient.DataCodings,System.String,System.Byte,System.Byte,System.String,System.Collections.Generic.List{ArdanStudios.Common.SmppClient.DestinationAddress})">
            <summary> Called to create a SubmitMulti object </summary>
            <param name="defaultEncoding"></param>
            <param name="serviceType"></param>
            <param name="srcTon"></param>
            <param name="srcNpi"></param>
            <param name="srcAddr"></param>
            <param name="destList"></param>
            <returns> SubmitMulti </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitMultiSm.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a SubmitMulti object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> SubmitMulti </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitMultiSm.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitMultiSm.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> A byte array </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.DataSm">
            <summary> This command is used to transfer data between the SMSC (Short Message Service Centre) and the
            ESME (Extended Short Message Entity). It may be used by both the ESME and SMSC  </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.ServiceType">
            <summary> Application service associated with the message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.SourceTon">
            <summary> Source address type of number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.SourceNpi">
            <summary> Source address numbering plan indicator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.SourceAddr">
            <summary> Source phone number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.DestTon">
            <summary> Destination address type of number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.DestNpi">
            <summary> Destination address numbering plan indicator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.DestAddr">
            <summary> Destination phone number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.EsmClass">
            <summary> Extended short message class </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.RegisteredDelivery">
            <summary> Indicates if the message is a registered short message and thus if a Delivery Receipt is required upon the message attaining a final state </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.DataCoding">
            <summary> Indicates the encoding scheme of the payload data </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.UserDataBuffer">
            <summary> The smpp data packet </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.UserData">
            <summary> The user data portion of the data packet </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.MessageReferenceNumber">
            <summary> A reference assigned by the originating SME to the short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.TotalSegments">
            <summary> Total number of short messages within the concatenated short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.SequenceNumber">
            <summary> Sequence number of a particular short message within the concatenated short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.Optional">
            <summary> Optional Parameters </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.MessageMode">
            <summary> Indicates message mode associated with the short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.MessageType">
            <summary> Indicates message type associated with the short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.MessageFeature">
            <summary> Indicates GSM Network Specific Features associated with the short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.SMSCReceipt">
            <summary> SMSC Delivery Receipt </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.Acknowledgement">
            <summary> SME originated Acknowledgement </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSm.Notification">
            <summary> Intermediate Notification </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataSm.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataSm.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a DataSm object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> DataSm </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataSm.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataSm.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.DataSmResp">
            <summary> Represents the response to the data_sm PDU </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSmResp.MessageId">
            <summary> The id of the message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DataSmResp.Optional">
            <summary> Optional Parameters </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32,System.String)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
            <param name="messageId"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to create a DataSmResp object </summary>
            <param name="defaultEncoding"></param>
            <returns> DataSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus)">
            <summary> Called to create a DataSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="status"></param>
            <returns> DataSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Called to create a DataSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="status"></param>
            <param name="sequence"></param>
            <returns> DataSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.DataSm,ArdanStudios.Common.SmppClient.CommandStatus,System.String)">
            <summary> Called to create a DataSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="dataSm"></param>
            <param name="commandStatus"></param>
            <param name="messageId"></param>
            <returns> DataSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a DataSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> DataSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataSmResp.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DataSmResp.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.DeliverSm">
            <summary> The deliver_sm is issued by the SMSC (Short Message Service Centre) to send a
            message to an ESME (Extended Short Message Entity). Using this command, the SMSC may route a
            short message to the ESME for delivery. </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.ServiceType">
            <summary> Application service associated with the message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.SourceTon">
            <summary> Source address type of number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.SourceNpi">
            <summary> Source address numbering plan indicator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.SourceAddr">
            <summary> Source phone number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.DestTon">
            <summary> Destination address type of number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.DestNpi">
            <summary> Destination address numbering plan indicator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.DestAddr">
            <summary> Destination phone number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.EsmClass">
            <summary> Extended short message class </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.ProtocolId">
            <summary> Indicates which protocol to use </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.PriorityFlag">
            <summary> Indicate the priority level of the message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.ScheduleDeliveryTime">
            <summary> The date and time the message should be delivered </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.ValidityPeriod">
            <summary> Indicates how long the message is valid </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.RegisteredDelivery">
            <summary> Indicates if the message is a registered short message and thus if a Delivery Receipt is required upon the message attaining a final state </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.ReplaceIfPresent">
            <summary> Requests the SMSC to replace a previously submitted message, that is still pending delivery </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.DataCoding">
            <summary> Indicates the encoding scheme of the payload data </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.DefaultMessageId">
            <summary> Default message id </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.ShortMessageLength">
            <summary> Message data length </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.UserDataBuffer">
            <summary> The smpp data packet </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.UserData">
            <summary> The user data portion of the data packet </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.Optional">
            <summary> Optional Parameters </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.MessageReferenceNumber">
            <summary> A reference assigned by the originating SME to the short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.TotalSegments">
            <summary> Total number of short messages within the concatenated short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.SeqmentNumber">
            <summary> Indicates the segment number of a particular short message fragment within the concatenated short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.ShortMessage">
            <summary> Short message text in specified data_coding </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.ShortMessageBytes">
            <summary> Up to 254 octets of short message user data. The exact physical limit for short_message size may vary according to the underlying network </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.MessageMode">
            <summary> Indicates message mode associated with the short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.MessageType">
            <summary> Indicates message type associated with the short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.MessageFeature">
            <summary> Indicates GSM Network Specific Features associated with the short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.SMSCReceipt">
            <summary> SMSC Delivery Receipt </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.Acknowledgement">
            <summary> SME originated Acknowledgement </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSm.Notification">
            <summary> Intermediate Notification </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSm.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSm.#ctor(ArdanStudios.Common.SmppClient.DataCodings,System.String,System.Byte,System.Byte,System.String,System.Byte,System.Byte,System.String)">
            <summary> Constructor</summary>
            <param name="defaultEncoding"></param>
            <param name="serviceType"></param>
            <param name="sourceTon"></param>
            <param name="sourceNpi"></param>
            <param name="sourceAddr"></param>
            <param name="destTon"></param>
            <param name="destNpi"></param>
            <param name="destAddr"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSm.Create(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to create a DeliverSm object </summary>
            <param name="defaultEncoding"></param>
            <returns> DeliverSm </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSm.Create(ArdanStudios.Common.SmppClient.DataCodings,System.String,System.Byte,System.Byte,System.String,System.Byte,System.Byte,System.String)">
            <summary> Called to create a DeliverSm object </summary>
            <param name="defaultEncoding"></param>
            <param name="serviceType"></param>
            <param name="sourceTon"></param>
            <param name="sourceNpi"></param>
            <param name="sourceAddr"></param>
            <param name="destTon"></param>
            <param name="destNpi"></param>
            <param name="destAddr"></param>
            <returns> SubmitSm </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSm.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Parses the smpp buffer to a DeliverSm object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> DeliverSm </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSm.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSm.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> A byte array </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.DeliverSmResp">
            <summary> Represents the response to the deliver_sm PDU </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSmResp.MessageId">
            <summary> In DeliverSM this is never used and needs to be NULL </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.DeliverSmResp.Optional">
            <summary> Optional Parameters </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to create a DeliverSmResp object </summary>
            <param name="defaultEncoding"></param>
            <returns> DeliverSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus)">
            <summary> Called to create a DeliverSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <returns> DeliverSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Called to create a DeliverSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
            <returns> DeliverSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.DeliverSm,ArdanStudios.Common.SmppClient.CommandStatus)">
            <summary> Called to create a DeliverSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="deliverSm"></param>
            <param name="commandStatus"></param>
            <returns> DeliverSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a DeliverSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> DeliverSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSmResp.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.DeliverSmResp.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.EnquireLinkSm">
            <summary> This message can be sent by either the ESME (Extended Short Message Entity) or
            SMSC (Short Message Service Centre) and is used to provide a confidencecheck of the communication
            path between an ESME and an SMSC </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.EnquireLinkSm.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.EnquireLinkSm.Create(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to create a new EnquireLink object </summary>
            <param name="defaultEncoding"></param>
            <returns> EnquireLink </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.EnquireLinkSm.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a new EnquireLink object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> EnquireLink </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.EnquireLinkSm.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.EnquireLinkSm.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.EnquireLinkSmResp">
            <summary> Represents the response to the enquire_link PDU </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.EnquireLinkSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.EnquireLinkSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.EnquireLinkSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Called to create a EnquireLinkResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="status"></param>
            <param name="sequence"></param>
            <returns> EnquireLinkResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.EnquireLinkSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.EnquireLinkSm,ArdanStudios.Common.SmppClient.CommandStatus)">
            <summary> Called to create a EnquireLinkResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="enquireLink"></param>
            <param name="commandStatus"></param>
            <returns> EnquireLinkResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.EnquireLinkSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a EnquireLinkResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> EnquireLinkResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.EnquireLinkSmResp.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.EnquireLinkSmResp.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.GenericNackSm">
            <summary> This is a generic negative acknowledgement to an SMPP PDU submitted with an invalid
            message header </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.GenericNackSm.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.GenericNackSm.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="status"></param>
            <param name="sequence"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.GenericNackSm.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Called to create a GenericNack object </summary>
            <param name="defaultEncoding"></param>
            <param name="status"></param>
            <param name="sequence"></param>
            <returns> GenericNack </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.GenericNackSm.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a GenericNack object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> GenericNack </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.GenericNackSm.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.GenericNackSm.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.Header">
            <summary> General Header class </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Header.HEADER_LENGTH">
            <summary> Length of the header section of the PDU </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.Header.PduData">
            <summary> The raw pdu data </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.Header.Length">
            <summary> Overall length of the PDU </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.Header.Command">
            <summary> The Command id </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.Header.Status">
            <summary> The Command status </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.Header.Sequence">
            <summary> Unique sequence number. PDU will echo the same sequence number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.Header.ExternalId">
            <summary> This id is a unique id to identify this pdu in an external system </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.Header.DefaultEncoding">
            <summary> The encoding for the default DCS </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.Header.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor
            BindSmResp requires this because we don't know the command set until later </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.Header.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandSet)">
            <summary> Constructor </summary>
            <param name="commandSet"></param>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.Header.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandSet,ArdanStudios.Common.SmppClient.CommandStatus)">
            <summary> Constructor </summary>
            <param name="commandSet"></param>
            <param name="commandStatus"></param>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.Header.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandSet,System.UInt32)">
            <summary> Constructor </summary>
            <param name="commandSet"></param>
            <param name="sequence"></param>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.Header.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandSet,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Constructor </summary>
            <param name="commandSet"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.Header.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.Header)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="header"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.IPacket">
            <summary> IPacket Interface </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.IPacket.GetPDU">
            <summary> Interface to support processing PDU's </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.BindSm">
            <summary> Register an instance of an ESME (Extended Short Message Entity) with the SMSC (Short Message Service Centre)
            system and request an SMPP session over this network connection for the submission or
            delivery of messages </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.BindSm.SystemId">
            <summary> User system id </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.BindSm.Password">
            <summary> User password </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.BindSm.SystemType">
            <summary> The type of ESME that is binding to the SMSC </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.BindSm.InterfaceVersion">
            <summary> Indicate the version of the SMPP protocol </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.BindSm.AddrTon">
            <summary> Source address type of number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.BindSm.AddrNpi">
            <summary> Source address numbering plan indicator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.BindSm.AddressRange">
            <summary> Identifies a set of SME addresses. Regular Expression notation should be used to
            specify a range of addresses </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.BindSm.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.BindSm.Create(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Create a new pduBind object </summary>
            <param name="defaultEncoding"></param>
            <returns> PduBind </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.BindSm.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a PduBind object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> BindSm </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.BindSm.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.BindSm.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.BindSmResp">
            <summary> Represents the response to the bind PDU </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.BindSmResp.SystemId">
            <summary> User system id </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.BindSmResp.Optional">
            <summary> Optional Parameters </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.BindSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.BindSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.Header)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="header"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.BindSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandSet,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32,System.String)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="commandSet"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
            <param name="systemId"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.BindSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to create a PduBindResp object </summary>
            <param name="defaultEncoding"></param>
            <returns> PduBindResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.BindSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.Header)">
            <summary> Called to create a PduBindResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="header"></param>
            <returns> PduBindResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.BindSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.BindSm,ArdanStudios.Common.SmppClient.CommandSet,ArdanStudios.Common.SmppClient.CommandStatus,System.String)">
            <summary> Called to create a BindSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="bindSm"></param>
            <param name="commandSet"></param>
            <param name="commandStatus"></param>
            <param name="systemId"></param>
            <returns> BindSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.BindSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a PduBindResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> PduBindResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.BindSmResp.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.BindSmResp.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.UnBindSm">
            <summary> Deregister an instance of an ESME (Extended Short Message Entity) from the
            SMSC (Short Message Service Centre) and inform the SMSC that the ESME no longer wishes
            to use this network connection for the submission or delivery of messages </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnBindSm.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnBindSm.Create(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to create a PduUnBind object </summary>
            <param name="defaultEncoding"></param>
            <returns> PduUnBind </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnBindSm.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a PduUnBind object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> PduUnBind </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnBindSm.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnBindSm.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.UnBindSmResp">
            <summary> Represents the response to the unbind PDU </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnBindSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnBindSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnBindSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnBindSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus)">
            <summary> Called to create a PduUnBindResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <returns> PduUnBindResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnBindSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Called to create a SubmitMultiResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
            <returns> UnBindSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnBindSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.UnBindSm,ArdanStudios.Common.SmppClient.CommandStatus)">
            <summary> Called to create a PduUnBindResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="unBindSm"></param>
            <param name="commandStatus"></param>
            <returns> PduUnBindResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnBindSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a PduUnBindResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> PduUnBindResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnBindSmResp.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UnBindSmResp.GetPDU">
            <summary> Called to return the buffer of byte for this object </summary>
            <returns> A byte array </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.QuerySm">
            <summary> Query the status of a previously submitted short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.QuerySm.MessageId">
            <summary> The id of the message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.QuerySm.SourceTon">
            <summary> Source address type of number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.QuerySm.SourceNpi">
            <summary> Source address numbering plan indicator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.QuerySm.SourceAddr">
            <summary> Source phone number </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.QuerySm.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.QuerySm.#ctor(ArdanStudios.Common.SmppClient.DataCodings,System.String,System.Byte,System.Byte,System.String)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="messageId"></param>
            <param name="sourceTon"></param>
            <param name="sourceNpi"></param>
            <param name="sourceAddr"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.QuerySm.Create(ArdanStudios.Common.SmppClient.DataCodings,System.String,System.Byte,System.Byte,System.String)">
            <summary> Called to create a QuerySm object </summary>
            <param name="defaultEncoding"></param>
            <param name="messageId"></param>
            <param name="sourceTon"></param>
            <param name="sourceNpi"></param>
            <param name="sourceAddr"></param>
            <returns> QuerySm </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.QuerySm.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a QuerySm object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> QuerySm </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.QuerySm.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.QuerySm.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.QuerySmResp">
            <summary> Represents the response to the query_sm_resp PDU </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.QuerySmResp.MessageId">
            <summary> The id of the message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.QuerySmResp.FinalDateString">
            <summary> The raw final date string </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.QuerySmResp.MessageState">
            <summary> The state of the message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.QuerySmResp.ErrorCode">
            <summary> The error code </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.QuerySmResp.FinalDate">
            <summary> The final date </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.QuerySmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.QuerySmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.QuerySmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32,System.String)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
            <param name="messageId"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.QuerySmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus)">
            <summary> Called to create a QuerySmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="status"></param>
            <returns> QuerySmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.QuerySmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Called to create a QuerySmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="status"></param>
            <param name="sequence"></param>
            <returns> QuerySmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.QuerySmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.QuerySm,ArdanStudios.Common.SmppClient.CommandStatus)">
            <summary> Called to create a DeliverSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="querySm"></param>
            <param name="commandStatus"></param>
            <returns> QuerySmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.QuerySmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a QuerySmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> QuerySmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.QuerySmResp.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.QuerySmResp.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SequenceGenerator">
            <summary> Generates sequence numbers </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SequenceGenerator.Locker">
            <summary> Provided to lock the shared resource </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SequenceGenerator.Sequence">
            <summary> Sequence counter </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SequenceGenerator.ByteSequence">
            <summary> Sequence byte counter </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SequenceGenerator.Rnd">
            <summary> Random generator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SequenceGenerator.Counter">
            <summary> Called to return the next counter </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SequenceGenerator.ByteCounter">
            <summary> Called to return the next byte counter </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppBuffer">
            <summary> The core smpp data structure </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SmppBuffer.ListBuffer">
            <summary> Buffer of raw bytes </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SmppBuffer.Buffer">
            <summary> Returns the buffer as bytes </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SmppBuffer.Length">
            <summary> The number of bytes we have stored </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppBuffer.DefaultEncoding">
            <summary> Defines the default encoding to use for DataCodings.Default </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppBuffer.ISO88591">
            <summary> ISO-8859-1 Encoding object </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.#ctor(ArdanStudios.Common.SmppClient.DataCodings,System.Collections.Generic.List{System.Byte})">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="listBuffer"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.#ctor(ArdanStudios.Common.SmppClient.DataCodings,System.Byte[])">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.#ctor(ArdanStudios.Common.SmppClient.DataCodings,System.Byte[],System.Int32)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="bytes"></param>
            <param name="length"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.Header)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="header"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.#ctor(ArdanStudios.Common.SmppClient.DataCodings,System.String,ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="value"></param>
            <param name="dataCoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddFinalLength">
            <summary> Called to add the final length to the buffer </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddByte(System.Byte)">
            <summary> Called to add a byte to the buffer </summary>
            <param name="byt"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddBytes(System.Byte[])">
            <summary> Called to add an array of bytes to the buffer </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddBytes(System.Byte[],System.Int32)">
            <summary> Called to add a specified number of bytes to the buffer </summary>
            <param name="bytes"></param>
            <param name="length"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddUInt(System.UInt32)">
            <summary> Called to add an unsigned int to the buffer </summary>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddInt(System.Int32)">
            <summary> Called to add an integer to the buffer </summary>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddShort(System.UInt16)">
            <summary> Called to add a short to the buffer </summary>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddCString(System.String)">
            <summary> Called to add a CString to the buffer </summary>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddTimeString(System.String,System.Int32)">
            <summary> Called to add a Time string to the buffer </summary>
            <param name="value"></param>
            <param name="length"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddEncodedString(System.String,ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to add the message to the buffer </summary>
            <param name="value"></param>
            <param name="dataCoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddSmppBuffer(ArdanStudios.Common.SmppClient.SmppBuffer)">
            <summary> Called to add the buffer of another SmppBuffer </summary>
            <param name="smppBuffer"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddUserData(ArdanStudios.Common.SmppClient.UserData)">
            <summary> Called to add a user data object to the buffer </summary>
            <param name="userData"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddUserDataHeader(ArdanStudios.Common.SmppClient.UserDataHeader)">
            <summary> Called to add a user data header object to the buffer </summary>
            <param name="userDataHeader"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddUserDataHeaderCollection(ArdanStudios.Common.SmppClient.UserDataHeaderCollection)">
            <summary> Called to add a user data header collection to the buffer </summary>
            <param name="userDataHeaderCollection"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddTLV(ArdanStudios.Common.SmppClient.TLV)">
            <summary> Called to add a TLV object to the buffer </summary>
            <param name="tlv"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddTLVCollection(ArdanStudios.Common.SmppClient.TLVCollection)">
            <summary> Called to add a TLV Collection to the buffer </summary>
            <param name="tlvCollection"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddHeader(ArdanStudios.Common.SmppClient.Header)">
            <summary> Called to add a header to the buffer </summary>
            <param name="header"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddDestinationAddress(ArdanStudios.Common.SmppClient.DestinationAddress)">
            <summary> Called to add a destination address to the buffer </summary>
            <param name="destinationAddress"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddDestinationAddresses(System.Collections.Generic.List{ArdanStudios.Common.SmppClient.DestinationAddress})">
            <summary> Called to add a list of destination addresses to the buffer </summary>
            <param name="destinationAddresses"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddUnsuccessDestinationAddress(ArdanStudios.Common.SmppClient.UnsuccessDestinationAddress)">
            <summary> Called to add a unsuccess destination address to the buffer </summary>
            <param name="unsuccessDestinationAddress"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.AddUnsuccessDestinationAddresses(System.Collections.Generic.List{ArdanStudios.Common.SmppClient.UnsuccessDestinationAddress})">
            <summary> Called to add a list of unsuccess destination addresses to the buffer </summary>
            <param name="unsuccessDestinationAddresses"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.PeekHeader(System.Int32)">
            <summary> Creates a new Header object from the buffer </summary>
            <param name="offset"></param>
            <returns> Header </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractInt(System.Int32@)">
            <summary> Extracts a specified portion of the smpp buffer to an unsigned integer </summary>
            <param name="offset"></param>
            <returns> A signed integer </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractShort(System.Int32@)">
            <summary> Extracts a specified portion of the smpp buffer to an unsigned short </summary>
            <param name="offset"></param>
            <returns> An unsigned short </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractByte(System.Int32@)">
            <summary> Extracts a specified portion of the smpp buffer to a byte </summary>
            <param name="offset"></param>
            <returns> A byte </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractByteArray(System.Int32@,System.UInt16)">
            <summary> Extracts a specified portion of the smpp buffer to a byte array </summary>
            <param name="offset"></param>
            <param name="length"></param>
            <returns> A byte array </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractCString(System.Int32@)">
            <summary> Extracts a specified portion of the smpp buffer to a string </summary>
            <param name="offset"></param>
            <returns> A string </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractEncodedString(System.Int32,System.Byte,System.Int32@)">
            <summary> Extracts a specified portion of the smpp buffer to a string </summary>
            <param name="length"></param>
            <param name="bCodepage"></param>
            <param name="offset"></param>
            <returns> string </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractEncodedString(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Extracts the entire smpp buffer to a string </summary>
            <param name="dataCoding"></param>
            <returns> string </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractHeader(ArdanStudios.Common.SmppClient.Header,System.Int32@)">
            <summary> Extracts the header portion of the PDU </summary>
            <param name="header"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractTLV(System.Int32@)">
            <summary> Extracts a specified portion of the smpp buffer to a TLV (options) object </summary>
            <param name="offset"></param>
            <returns> TLV </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractDestinationAddress(System.Int32@)">
            <summary> Extracts the destination address portion of the smpp buffer </summary>
            <param name="offset"></param>
            <returns> DestinationAddress </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractDestinationAddresses(System.Int32@)">
            <summary> Extract the destination address list portion of the smpp buffer </summary>
            <param name="offset"></param>
            <returns> List DestinationAddress </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractUnsuccessDestinationAddress(System.Int32@)">
            <summary> Extracts the unsuccess destination address portion of the smpp buffer </summary>
            <param name="offset"></param>
            <returns> UnsuccessDestinationAddress </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractUnsuccessDestinationAddresses(System.Int32@)">
            <summary> Extract the unsuccess destination address list portion of the smpp buffer </summary>
            <param name="offset"></param>
            <returns> List UnsuccessDestinationAddress </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractUserData(System.Boolean,System.Int32)">
            <summary> Called to extract the user data portion of the smpp buffer </summary>
            <param name="udhi"></param>
            <param name="offset"></param>
            <returns> UserData </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractInt(System.String,System.Int32@)">
            <summary> Extracts a specified portion of the smpp buffer to an unsigned integer </summary>
            <param name="propertyName"></param>
            <param name="offset"></param>
            <returns> PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractShort(System.String,System.Int32@)">
            <summary> Extracts a specified portion of the smpp buffer to an unsigned short </summary>
            <param name="propertyName"></param>
            <param name="offset"></param>
            <returns> PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractByte(System.String,System.Int32@)">
            <summary> Extracts a specified portion of the smpp buffer to a byte </summary>
            <param name="propertyName"></param>
            <param name="offset"></param>
            <returns> PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractByteArray(System.String,System.Int32@,System.UInt16)">
            <summary> Extracts a specified portion of the smpp buffer to a byte array </summary>
            <param name="propertyName"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns> PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractCString(System.String,System.Int32@)">
            <summary> Extracts a specified portion of the smpp buffer to a string </summary>
            <param name="propertyName"></param>
            <param name="offset"></param>
            <returns> PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractEncodedString(System.String,System.Int32,System.Byte,System.Int32@)">
            <summary> Extracts a specified portion of the smpp buffer to a string </summary>
            <param name="propertyName"></param>
            <param name="length"></param>
            <param name="bCodepage"></param>
            <param name="offset"></param>
            <returns> PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractHeaderDetails(System.Int32@)">
            <summary> Extracts the header portion of the PDU </summary>
            <param name="offset"></param>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractTLV(System.Collections.Generic.List{ArdanStudios.Common.SmppClient.PduPropertyDetail},System.Int32@)">
            <summary> Extracts a specified portion of the smpp buffer to a TLV (options) object </summary>
            <param name="details"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractDestinationAddress(System.Collections.Generic.List{ArdanStudios.Common.SmppClient.PduPropertyDetail},System.Int32@)">
            <summary> Extracts the destination address portion of the smpp buffer </summary>
            <param name="details"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractDestinationAddresses(System.Collections.Generic.List{ArdanStudios.Common.SmppClient.PduPropertyDetail},System.Int32@)">
            <summary> Extract the destination address list portion of the smpp buffer </summary>
            <param name="details"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractUnsuccessDestinationAddress(System.Collections.Generic.List{ArdanStudios.Common.SmppClient.PduPropertyDetail},System.Int32@)">
            <summary> Extracts the unsuccess destination address portion of the smpp buffer </summary>
            <param name="details"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractUnsuccessDestinationAddresses(System.Collections.Generic.List{ArdanStudios.Common.SmppClient.PduPropertyDetail},System.Int32@)">
            <summary> Extract the unsuccess destination address list portion of the smpp buffer </summary>
            <param name="details"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.ExtractUserData(System.Collections.Generic.List{ArdanStudios.Common.SmppClient.PduPropertyDetail},System.Boolean,System.Int32)">
            <summary> Called to extract the user data portion of the smpp buffer </summary>
            <param name="details"></param>
            <param name="udhi"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.SplitMessageOnParts(System.Byte[],System.Int32)">
            <summary> Splits the message into max length parts </summary>
            <param name="messageBytes"></param>
            <param name="maxLength"></param>
            <returns> List byte[] </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.Split(System.String,System.Int32)">
             <summary>
             
             </summary>
             <param name="message"></param>
             <param name="maxPartLength"></param>
             <returns></returns>
            This part was taken out of another lib. which had concatenated messages working
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.CharToIA5GSM(System.Char)">
            <summary> Converts a character from the ISO-8859-1 character set
            into the corresponding character of the GSM "7-bit default alphabet"
            character set </summary>
            <param name="c">The character to convert.</param>
            <returns> A string containing the converted character </returns>
            <remarks> A string is returned instead of a character because some characters
            must be escaped, and consist then of two characters instead of one </remarks>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.IA5GSMToChar(System.Byte,System.Byte)">
            <summary> Converts a character from the GSM "7-bit default alphabet"
            into the corresponding character of the ISO-8859-1 character set
            character set </summary>
            <param name="byt"></param>
            <param name="prevByt"></param>
            <returns> A the correspond GSM character is returned </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.StringToIA5GSM(System.String)">
            <summary> Converts a string consisting of characters from the ISO-8859-1
            character set into a string of corresponding characters of the
            GSM "7-bit default alphabet" character set </summary>
            <param name="s">The string to convert.</param>
            <returns>The converted string.</returns>
            <remarks> Note that the converted string does not need to have the same
            length as the original one because some characters may be escaped </remarks>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.IA5GSMToString(System.Byte[],System.Int32,System.Int32)">
            <summary> Converts a GSM "7-bit default alphabet" character set to a string </summary>
            <param name="bytes"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <remarks> Note that the converted string does not need to have the same
            length as the original one because some characters may be escaped </remarks>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.BytesToShort(System.Byte[],System.Int32)">
            <summary> Convert the specified byte array to an unsigned short </summary>
            <param name="buf"></param>
            <param name="startIndex"></param>
            <returns> An unsigned short </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.SeptetToOctet(System.Byte[])">
            <summary> Convert a 7 bit string to 8 bit string </summary>
            <param name="ListBuffer"></param>
            <returns> A string </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.SeptetToOctet(System.Int32,System.Int32@)">
            <summary> Convert a 7 bit string to 8 bit string </summary>
            <param name="length"></param>
            <param name="offset"></param>
            <returns> A string </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.IsSupportedTextDataCoding(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to determine if the data coding is support for text messages </summary>
            <param name="dataCoding"></param>
            <returns> bool </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppBuffer.BreakIntoDataBlocks(System.Int32)">
            <summary> Called to break the data into a list of data blocks </summary>
            <param name="maxLength"></param>
            <returns> List byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient">
            <summary> SMPP protocol client class for connection with an SMSC over a TCP/IP 
            and for sending or receiving short messages to and from the SMSC </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.AlertNotificationEventHandler">
            <summary> Occurs when received AlertNotification PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.BindSmEventHandler">
            <summary> Occurs when Bind packet received from SMSC </summary>
            <param name="sender"></param>
            <param name="data"></param>
            <returns> CommandStatus </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.BindSmRespEventHandler">
            <summary> Occurs when Bind Response packet received from SMSC </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.CancelSmEventHandler">
            <summary> Occurs when received CancelSm PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
            <returns> CommandStatus </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.CancelSmRespEventHandler">
            <summary> Occurs when received CancelSmResp PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.ConnectedEventHandler">
            <summary> Occurs when ESME connected to SMSC </summary>
            <param name="sender"></param>
            <param name="bSuccess"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.DeliverSmEventHandler">
            <summary> Occurs when received DeliverSm PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
            <returns> CommandStatus </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.DeliverSmRespEventHandler">
            <summary> Occurs when received DeliverSmResp PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.DataSmEventHandler">
            <summary> Occurs when receiving DataSm PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
            <param name="messageId"></param>
            <returns> CommandStatus </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.DataSmRespEventHandler">
            <summary> Occurs when receiving DataSmResp PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.DisconnectEventHandler">
            <summary> Occurs when ESME disconnected from SMSC </summary>
            <param name="sender"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.EnquireLinkSmEventHandler">
            <summary> Occurs when received EnquireLinkSm PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
            <returns> CommandStatus </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.EnquireLinkSmRespEventHandler">
            <summary> Occurs when received EnquireLinkSmResp PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.ErrorEventHandler">
            <summary> Occurs when SmppClient got an error or exception </summary>
            <param name="sender"></param>
            <param name="comment"></param>
            <param name="message"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.GenericNackSmEventHandler">
            <summary> Occurs when received GenericNack PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.PduDetailsEventHandler">
            <summary> Occurs when a PDU is received or sent </summary>
            <param name="sender"></param>
            <param name="pduDirectionType"></param>
            <param name="pdu"></param>
            <param name="details"></param>
            <returns> External Id </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.QuerySmEventHandler">
            <summary> Occurs when received QuerySm PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
            <param name="querySmResp"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.QuerySmRespEventHandler">
            <summary> Occurs when received QuerySmResp PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.SendDataEventHandler">
            <summary> Occurs when any PDU was sent from ESME to SMSC </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.SubmitSmEventHandler">
            <summary> Occurs when received SubmitSm PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
            <param name="messageId"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.SubmitSmRespEventHandler">
            <summary> Occurs when received SubmitSmResp PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.SubmitMultiSmEventHandler">
            <summary> Occurs when received SubmitMultiSm PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
            <param name="messageId"></param>
            <returns> CommandStatus </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.SubmitMultiSmRespEventHandler">
            <summary> Occurs when received SubmitMultiSmResp PDU </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.ReceiveDataEventHandler">
            <summary> Occurs when any PDU was received from SMSC to ESME </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.UnBindSmEventHandler">
            <summary> Occurs when Unbind packet received from SMSC </summary>
            <param name="sender"></param>
            <param name="data"></param>
            <returns> CommandStatus </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.UnBindSmRespEventHandler">
            <summary> Occurs when Unbind Response packet received from SMSC </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._Disposed">
            <summary> Identifies if the object is being destroyed </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._SystemType">
            <summary> Identifies the type requesting to bind with the SMSC </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._AddressRange">
            <summary> Identifies a set of SME addresses. Regular Expression notation should be used to specify a range of addresses </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._AddrNpi">
            <summary> Numbering Plan Indicator for ESME address </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._AddrTon">
            <summary> Indicates Type of Number of the ESME address. </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._Timeout">
            <summary> Response waiting timeout </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._EnqInterval">
            <summary> Interval in seconds between EnquireLink submition </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._ShortMessageMaxBytes">
            <summary> Defines maximum bytes length in one part of the concatenated short messages. The GSM 7bit standard defines a maximum of 160 octets for a single short message </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._EnquireLinkTimer">
            <summary> Time to keep the connection with the SMPP server alive </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._SocketClient">
            <summary> The socket to the SMPP server </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._Status">
            <summary> Provides connection status information </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._LastSubmit">
            <summary> The date and time of the last submit </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._LastSubmitLock">
            <summary> Used to serialze access to the last submit object </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._LastPdu">
            <summary> The date and time of the last pdu received </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._LastPduLock">
            <summary> Used to serialze access to the last pdu object </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient._ConnectionMode">
            <summary> The connection mode for this connection </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient.BindSmResp">
            <summary> Response to the bind request </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient.UnBindSmResp">
            <summary> Response to the unbind request </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient.EnquireLinkSmResp">
            <summary> Response to the enquire link request </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.AlertNotificationEvent">
            <summary> Occurs when received AlertNotification PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.BindSmEvent">
            <summary> Occurs when Bind packet received from SMSC </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.BindSmRespEvent">
            <summary> Occurs when Bind packet received from SMSC </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.CancelSmEvent">
            <summary> Occurs when received CancelSm PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.CancelSmRespEvent">
            <summary> Occurs when received CancelSmResp PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.ConnectEvent">
            <summary> Occurs when ESME connected to SMSC </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.DataSmEvent">
            <summary> Occurs when receiving DataSm PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.DataSmRespEvent">
            <summary> Occurs when received DataSmResp PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.DeliverSmEvent">
            <summary> Occurs when receiving DeliverSm PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.DeliverSmRespEvent">
            <summary> Occurs when received DeliverSmResp PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.DisconnectEvent">
            <summary> Occurs when ESME disconnected from SMSC </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.EnquireLinkSmEvent">
            <summary> Occurs when received EnquireLink PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.EnquireLinkSmRespEvent">
            <summary> Occurs when received EnquireLink PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.ErrorEvent">
            <summary> Occurs when SmppClient got an error or exception </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.GenericNackSmEvent">
            <summary> Occurs when received GenericNack PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.PduDetailsEvent">
            <summary> Occurs when a PDU is received or sent </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.QuerySmEvent">
            <summary> Occurs when received QuerySm PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.QuerySmRespEvent">
            <summary> Occurs when received QuerySmResp PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.SubmitSmEvent">
            <summary> Occurs when received SubmitSm PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.SubmitSmRespEvent">
            <summary> Occurs when received SubmitSmResp PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.SubmitMultiSmEvent">
            <summary> Occurs when received SubmitMultiResp PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.SubmitMultiSmRespEvent">
            <summary> Occurs when received SubmitMultiResp PDU </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.UnBindSmEvent">
            <summary> Occurs when Unbind packet received from SMSC </summary>
        </member>
        <member name="E:ArdanStudios.Common.SmppClient.SmppClient.UnBindSmRespEvent">
            <summary> Occurs when Unbind packet received from SMSC </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.EventData">
            <summary> Used to manage a submit/response exchange </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.EventData.Release">
            <summary> Resets the object for new use </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient.GenericDone">
            <summary> Event to signal genric event is done </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient.ConnectDone">
            <summary> Event to signal connection is done </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient.BindDone">
            <summary> Event to signal bind is done </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient.UnbindDone">
            <summary> Event to signal unbind is done </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient.EnquireDone">
            <summary> Event to signal enquire is done </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient.SubmitDone">
            <summary> Events to signal submit is done </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient.EventDataList">
            <summary> A set of events for processing </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SmppClient.SystemType">
            <summary> Identifies the type requesting to bind with the SMSC </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SmppClient.AddressRange">
            <summary> Identifies a set of SME addresses. Regular Expression notation should be used to specify a range of addresses </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SmppClient.AddrNpi">
            <summary> Numbering Plan Indicator for ESME address </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SmppClient.AddrTon">
            <summary> Indicates Type of Number of the ESME address. </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SmppClient.Timeout">
            <summary> Response waiting timeout </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SmppClient.EnquireInterval">
            <summary> Interval in seconds between EnquireLink submition </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SmppClient.ShortMessageMaxBytes">
            <summary> Defines maximum bytes length in one part of the concatenated short messages.  The GSM standard defines a maximum of 140 octets for a single short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SmppClient.Status">
            <summary> Client connection status </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SmppClient.ConnectionModes">
            <summary> The connection mode for this connection </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient.DefaultEncoding">
            <summary> The encoding for the default DCS </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SmppClient.UserDataControl">
            <summary> Provides control support for collections data segments </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient.UserDataControl.SegmentsLeftToReceived">
            <summary> The number of seqments left to receive </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SmppClient.UserDataControl.UserData">
            <summary> The user data </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.UserDataControl.#ctor(System.Int32)">
            <summary> Constructor </summary>
            <param name="segmentsLeftToReceived"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor for ESME support </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.Utilities.SocketClient)">
            <summary> Constructor for SMSC support </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.Dispose">
            <summary> Dispose </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.Dispose(System.Boolean)">
            <summary> Dispose </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.RequestEventData">
            <summary> Called to request an event data object for processing </summary>
            <returns> AutoResetEvent </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.ReleaseEventData(ArdanStudios.Common.SmppClient.SmppClient.EventData)">
            <summary> Called to release an event data object back into the stack </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.MessageHandler(ArdanStudios.Common.Utilities.SocketClient)">
            <summary> Called when a message is extracted from the socket </summary>
            <param name="socket"> The SocketClient object the message came from </param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.CloseHandler(ArdanStudios.Common.Utilities.SocketClient)">
            <summary> Called when a socket connection is closed </summary>
            <param name="socket"> The SocketClient object the message came from </param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.ErrorHandler(ArdanStudios.Common.Utilities.SocketClient,System.Exception)">
            <summary> Called when a socket error occurs </summary>
            <param name="socket"> The SocketClient object the message came from </param>
            <param name="exception"> The reason for the error </param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnAlertNotification(ArdanStudios.Common.SmppClient.AlertNotification)">
            <summary> Called to fire the alert notification event </summary>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnBindSm(ArdanStudios.Common.SmppClient.BindSm)">
            <summary> Called to fire the bind pdu event </summary>
            <param name="data"></param>
            <returns> CommandStatus </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnBindSmResp(ArdanStudios.Common.SmppClient.BindSmResp)">
            <summary> Called to fire the bind response pdu event </summary>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnCancelSm(ArdanStudios.Common.SmppClient.CancelSm)">
            <summary> Called to fire the cancel pdu event </summary>
            <param name="data"></param>
            <returns> CommandStatus </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnCancelSmResp(ArdanStudios.Common.SmppClient.CancelSmResp)">
            <summary> Called to fire the cancel response pdu event </summary>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnConnect(System.Boolean)">
            <summary> Called to fire the connect event </summary>
            <param name="bSuccess"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnDataSm(ArdanStudios.Common.SmppClient.DataSm,System.String@)">
            <summary> Called to fire the data pdu event </summary>
            <param name="data"></param>
            <param name="messageId"></param>
            <returns> CommandStatus </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnDataSmResp(ArdanStudios.Common.SmppClient.DataSmResp)">
            <summary> Called to fire the data response pdu event </summary>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnDeliverSm(ArdanStudios.Common.SmppClient.DeliverSm)">
            <summary> Called to fire the deliver pdu event </summary>
            <param name="data"></param>
            <returns> CommandStatus </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnDeliverSmResp(ArdanStudios.Common.SmppClient.DeliverSmResp)">
            <summary> Called to fire the deliver response pdu event </summary>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnDisconnect">
            <summary> Called to fire the disconnect event </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnEnquireLinkSm(ArdanStudios.Common.SmppClient.EnquireLinkSm)">
            <summary> Called to fire the enquire link event </summary>
            <param name="data"></param>
            <returns> CommandStatus </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnEnquireLinkSmResp(ArdanStudios.Common.SmppClient.EnquireLinkSmResp)">
            <summary> Called to fire the enquire link resp event </summary>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnError(System.String)">
            <summary> Called to fire the error event </summary>
            <param name="Comment"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnError(System.String,System.Exception)">
            <summary> Called to fire the error event </summary>
            <param name="Comment"></param>
            <param name="exception"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnGenericNackSm(ArdanStudios.Common.SmppClient.GenericNackSm)">
            <summary> Called to fire the generic nack pdu event </summary>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnPduDetails(ArdanStudios.Common.SmppClient.PduDirectionTypes,ArdanStudios.Common.SmppClient.Header)">
            <summary> Called to fire the pdu detail event </summary>
            <param name="pduDirectionType"></param>
            <param name="pdu"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnQuerySm(ArdanStudios.Common.SmppClient.QuerySm)">
            <summary> Called to fire the query pdu event </summary>
            <param name="data"></param>
            <returns> QuerySmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnQuerySmResp(ArdanStudios.Common.SmppClient.QuerySmResp)">
            <summary> Called to fire the query resp pdu event </summary>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnSubmitSm(ArdanStudios.Common.SmppClient.SubmitSm,System.String@)">
            <summary> Called to fire the submit pdu event </summary>
            <param name="data"></param>
            <param name="messageId"></param>
            <returns> CommandStatus </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnSubmitSmResp(ArdanStudios.Common.SmppClient.SubmitSmResp)">
            <summary> Called to fire the submit pdu event </summary>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnSubmitMultiSm(ArdanStudios.Common.SmppClient.SubmitMultiSm,System.String@)">
            <summary> Called to fire the submit multi pdu event </summary>
            <param name="data"></param>
            <param name="messageId"></param>
            <returns> CommandStatus </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnSubmitMultiSmResp(ArdanStudios.Common.SmppClient.SubmitMultiSmResp)">
            <summary> Called to fire the submit multi response pdu event </summary>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnUnBindSm(ArdanStudios.Common.SmppClient.UnBindSm)">
            <summary> Called to fire the unbind pdu event </summary>
            <param name="data"></param>
            <returns> CommandStatus </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.OnUnBindSmResp(ArdanStudios.Common.SmppClient.UnBindSmResp)">
            <summary> Called to fire the unbind response pdu event </summary>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.Connect(System.String,System.Int32)">
            <summary> Connect to SMSC using hostname and port number </summary>
            <param name="hostName"> SMSC hostname </param>
            <param name="port"> SMSC port </param>
            <returns> A Boolean value indicating true if the client is connected, false if not </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.Disconnect">
            <summary> Disconnect client from SMSC </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.Bind(System.String,System.String)">
            <summary> Register client as Transceiver with the SMSC system and request an SMPP session </summary>
            <param name="SystemId"> Identifies the ESME system requesting to bind with the SMSC </param>
            <param name="Password"> Password used by the SMSC to authenticate the client </param>
            <returns> A BindSmResp object </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.Bind(System.String,System.String,ArdanStudios.Common.SmppClient.ConnectionModes)">
            <summary> Register client with the SMSC system and request an SMPP session </summary>
            <param name="SystemId"></param>
            <param name="Password"></param>
            <param name="mode"></param>
            <returns> BindSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.UnBind">
            <summary> Unbind the client from the SMSC </summary>
            <returns> UnBindSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.Submit(ArdanStudios.Common.SmppClient.SubmitSm)">
            <summary> Submit a short message to the SMSC </summary>
            <param name="data"></param>
            <returns> A SubmitSmResp object </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.Submit(ArdanStudios.Common.SmppClient.SubmitMultiSm)">
            <summary> Submit a short message to the SMSC</summary>
            <param name="data"></param>
            <returns> A SubmitMultiResp object </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.Submit(System.Collections.Generic.List{ArdanStudios.Common.SmppClient.SubmitSm})">
            <summary> Submit array of short messages to the SMSC </summary>
            <param name="submitSmList"></param>
            <returns> A list of SubmitSmResp objects </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.Submit(System.Collections.Generic.List{ArdanStudios.Common.SmppClient.SubmitMultiSm})">
            <summary> Submit array of short messages to the SMSC </summary>
            <param name="submitMultiList"></param>
            <returns> A list of SubmitMultiResp objects </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.PrepareDeliver(ArdanStudios.Common.SmppClient.DeliverMode,System.String,System.Byte,System.Byte,System.String,System.Byte,System.Byte,System.String,ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.DataCodings,System.String)">
            <summary> Prepare DeliverSm instances for sending to ESME </summary>
            <param name="mode"></param>
            <param name="serviceType"></param>
            <param name="srcTon"></param>
            <param name="srcNpi"></param>
            <param name="srcAddr"></param>
            <param name="destTon"></param>
            <param name="destNpi"></param>
            <param name="destAddr"></param>
            <param name="submitDataCoding"></param>
            <param name="encodeDataCoding"></param>
            <param name="message"></param>
            <returns> DeliverSm </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.PrepareSubmit(ArdanStudios.Common.SmppClient.SubmitMode,System.String,System.Byte,System.Byte,System.String,System.Byte,System.Byte,System.String,ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.DataCodings,System.String)">
            <summary> Prepare SubmitSm instances for sending with methods Submit or SubmitAsync </summary>
            <param name="mode"></param>
            <param name="serviceType"></param>
            <param name="srcTon"></param>
            <param name="srcNpi"></param>
            <param name="srcAddr"></param>
            <param name="destTon"></param>
            <param name="destNpi"></param>
            <param name="destAddr"></param>
            <param name="submitDataCoding"></param>
            <param name="encodeDataCoding"></param>
            <param name="message"></param>
            <returns> A SubmitSm object </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.PrepareSubmitLarge(ArdanStudios.Common.SmppClient.SubmitMode,System.String,System.Byte,System.Byte,System.String,System.Byte,System.Byte,System.String,ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.DataCodings,System.String)">
            <summary> Prepare SubmitSm instances for sending with methods Submit or SubmitAsync </summary>
            <param name="mode"></param>
            <param name="serviceType"></param>
            <param name="srcTon"></param>
            <param name="srcNpi"></param>
            <param name="srcAddr"></param>
            <param name="destTon"></param>
            <param name="destNpi"></param>
            <param name="destAddr"></param>
            <param name="submitDataCoding"></param>
            <param name="encodeDataCoding"></param>
            <param name="message"></param>
            <returns> List SubmitSm </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.PrepareSubmit(ArdanStudios.Common.SmppClient.SubmitMode,System.String,System.Byte,System.Byte,System.String,System.Collections.Generic.List{ArdanStudios.Common.SmppClient.DestinationAddress},ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.DataCodings,System.String)">
            <summary> Prepare SubmitMulti instances for sending with methods Submit or SubmitAsync </summary>
            <param name="mode"></param>
            <param name="serviceType"></param>
            <param name="srcTon"></param>
            <param name="srcNpi"></param>
            <param name="srcAddr"></param>
            <param name="destList"></param>
            <param name="submitDataCoding"></param>
            <param name="encodeDataCoding"></param>
            <param name="message"></param>
            <returns> SubmitMulti </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.PrepareWapPush(System.Byte,System.String,System.Byte,System.Byte,System.String,System.Byte,System.Byte,System.String,System.String,System.String)">
            <summary> Prepare SubmitSm instances for sending as wap push </summary>
            <param name="transactionId"></param>
            <param name="serviceType"></param>
            <param name="srcTon"></param>
            <param name="srcNpi"></param>
            <param name="srcAddr"></param>
            <param name="destTon"></param>
            <param name="destNpi"></param>
            <param name="destAddr"></param>
            <param name="url"></param>
            <param name="title"></param>
            <returns> A SubmitSm object </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.Cancel(System.String,System.String,System.Byte,System.Byte,System.String,System.Byte,System.Byte,System.String)">
            <summary> Cancel previously submitted short message that is still pending delivery </summary>
            <param name="serviceType"></param>
            <param name="messageId"></param>
            <param name="srcTon"></param>
            <param name="srcNpi"></param>
            <param name="srcAddr"></param>
            <param name="dstTon"></param>
            <param name="dstNpi"></param>
            <param name="dstAddr"></param>
            <returns> CancelSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.Cancel(ArdanStudios.Common.SmppClient.CancelSm)">
            <summary> Cancel previously submitted short message that is still pending delivery </summary>
            <param name="data"></param>
            <returns> CancelSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.Query(System.String,System.Byte,System.Byte,System.String)">
            <summary> Query the status of a previously submitted short message </summary>
            <param name="messageId"></param>
            <param name="sourceTon"></param>
            <param name="sourceNpi"></param>
            <param name="sourceAddr"></param>
            <returns> QuerySmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.Query(ArdanStudios.Common.SmppClient.QuerySm)">
            <summary> Query the status of a previously submitted short message </summary>
            <param name="data"></param>
            <returns> QuerySmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.SendEnquireLink(System.Object,ArdanStudios.Common.Utilities.SynchronousTimer)">
            <summary> Called by the timer when it fires </summary>
            <param name="stateInfo"></param>
            <param name="theTimer"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.PerformEnquireLink">
            <summary> Called to enquire the SMPP about the connection </summary>
            <returns> EnquireLinkResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.SendPacket(ArdanStudios.Common.SmppClient.IPacket)">
            <summary> Called to send a message to the SMPP server </summary>
            <param name="packet"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SmppClient.ProcessReceivedData">
            <summary> Called to process received messages from the SMPP server </summary>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SubmitSm">
            <summary> SubmitSm PDU to submit a short message to the SMSC </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.SubmitSm._ValidityPeriod">
            <summary> Indicates how long the message is valid. Set to NULL to request the SMSC default validity period. Format 'YYMMDDhhmmsstnnp </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.ServiceType">
            <summary> Application service associated with the message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.SourceTon">
            <summary> Source address type of number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.SourceNpi">
            <summary> Source address numbering plan indicator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.SourceAddr">
            <summary> Source phone number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.DestTon">
            <summary> Destination address type of number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.DestNpi">
            <summary> Destination address numbering plan indicator </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.DestAddr">
            <summary> Destination phone number </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.EsmClass">
            <summary> Indicates Message Mode and Message Type </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.ProtocolId">
            <summary> Indicates which protocol to use </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.PriorityFlag">
            <summary> Indicate the priority level of the message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.ScheduleDeliveryTime">
            <summary> The date and time the message should be delivered. Set to NULL for immediate message delivery </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.ValidityPeriod">
            <summary> Indicates how long the message is valid. Set to NULL to request the SMSC default validity period. Format 'YYMMDDhhmmsstnnp </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.RegisteredDelivery">
            <summary> Indicator to signify if an SMSC delivery receipt or an SME acknowledgement is required </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.ReplaceIfPresent">
            <summary> Requests the SMSC to replace a previously submitted message, that is still pending delivery </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.DataCoding">
            <summary> Indicates the encoding scheme of the payload data </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.DefaultMsgId">
            <summary> Indicates the short message to send from a list of predefined (‘canned’) short messages stored on the SMSC. If not using an SMSC canned message, set to NULL </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.ShortMessageLength">
            <summary> Short Message data length </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.UserDataBuffer">
            <summary> The smpp data packet </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.UserData">
            <summary> The user data portion of the data packet </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.Optional">
            <summary> Optional Parameters </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.MessageReferenceNumber">
            <summary> A reference assigned by the originating SME to the short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.TotalSegments">
            <summary> Total number of short messages within the concatenated short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.SeqmentNumber">
            <summary> Indicates the segment number of a particular short message fragment within the concatenated short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.ShortMessage">
            <summary> Short message text in specified data_coding </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.ShortMessageBytes">
            <summary> Up to 254 octets of short message user data. The exact physical limit for short_message size may vary according to the underlying network </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.MessageMode">
            <summary> Indicates message mode associated with the short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.MessageType">
            <summary> Indicates message type associated with the short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.MessageFeature">
            <summary> Indicates GSM Network Specific Features associated with the short message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.SMSCReceipt">
            <summary> SMSC Delivery Receipt </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.Acknowledgement">
            <summary> SME originated Acknowledgement </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSm.Notification">
            <summary> Intermediate Notification </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSm.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSm.#ctor(ArdanStudios.Common.SmppClient.DataCodings,System.String,System.Byte,System.Byte,System.String,System.Byte,System.Byte,System.String)">
            <summary> Constructor</summary>
            <param name="defaultEncoding"></param>
            <param name="serviceType"></param>
            <param name="sourceTon"></param>
            <param name="sourceNpi"></param>
            <param name="sourceAddr"></param>
            <param name="destTon"></param>
            <param name="destNpi"></param>
            <param name="destAddr"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSm.Create(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to create a SubmitSm object </summary>
            <param name="defaultEncoding"></param>
            <returns> SubmitSm </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSm.Create(ArdanStudios.Common.SmppClient.DataCodings,System.String,System.Byte,System.Byte,System.String,System.Byte,System.Byte,System.String)">
            <summary> Called to create a SubmitSm object </summary>
            <param name="defaultEncoding"></param>
            <param name="serviceType"></param>
            <param name="sourceTon"></param>
            <param name="sourceNpi"></param>
            <param name="sourceAddr"></param>
            <param name="destTon"></param>
            <param name="destNpi"></param>
            <param name="destAddr"></param>
            <returns> SubmitSm </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSm.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a SubmitSm object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> SubmitSm </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSm.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSm.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.SubmitSmResp">
            <summary> Represents the response to the submit_sm PDU </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSmResp.MessageId">
            <summary> The id of the message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.SubmitSmResp.Optional">
            <summary> Optional Parameters </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSmResp.#ctor(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32,System.String)">
            <summary> Constructor </summary>
            <param name="defaultEncoding"></param>
            <param name="commandStatus"></param>
            <param name="sequence"></param>
            <param name="messageId"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to create a SubmitSmResp object </summary>
            <param name="defaultEncoding"></param>
            <returns> SubmitSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.CommandStatus,System.UInt32)">
            <summary> Called to create a SubmitSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="status"></param>
            <param name="sequence"></param>
            <returns> SubmitSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SubmitSm,ArdanStudios.Common.SmppClient.CommandStatus,System.String)">
            <summary> Called to create a DataSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="submitSm"></param>
            <param name="commandStatus"></param>
            <param name="messageId"></param>
            <returns> DataSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSmResp.Create(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.SmppBuffer,System.Int32@)">
            <summary> Called to create a SubmitSmResp object </summary>
            <param name="defaultEncoding"></param>
            <param name="buf"></param>
            <param name="offset"></param>
            <returns> SubmitSmResp </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSmResp.Details">
            <summary> Called to return a list of property details from the PDU </summary>
            <returns> List PduPropertyDetail </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.SubmitSmResp.GetPDU">
            <summary> Called to return the PDU for this type of object </summary>
            <returns> byte[] </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.TLV">
            <summary> Represents TLV (Tag, Length, Value) format for optional parameters </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.TLV.Tag">
            <summary> The Tag field is used to uniquely identify the particular optional parameter </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.TLV.Length">
            <summary> Indicates the length of the Value property in octets </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.TLV.Value">
            <summary> Contains the actual data for the optional parameter </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.TLV.TagValue">
            <summary> Identifies the particular optional parameter </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.TLV.#ctor">
            <summary> Constructor </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.TLV.#ctor(System.UInt16,System.UInt16,System.Byte[])">
            <summary> Constructor </summary>
            <param name="tag"></param>
            <param name="length"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.TLV.#ctor(ArdanStudios.Common.SmppClient.OptionalTags,System.UInt16,System.Byte[])">
            <summary> Constructor </summary>
            <param name="tag"></param>
            <param name="length"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.TLV.Create">
            <summary> Called to create a TLV object </summary>
            <returns> TLV </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.TLV.Create(System.UInt16,System.UInt16,System.Byte[])">
            <summary> Called to create a TLV object </summary>
            <param name="tag"></param>
            <param name="length"></param>
            <param name="value"></param>
            <returns> TLV </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.TLV.Create(ArdanStudios.Common.SmppClient.OptionalTags,System.UInt16,System.Byte[])">
            <summary> Called to create a TLV object </summary>
            <param name="tag"></param>
            <param name="length"></param>
            <param name="value"></param>
            <returns> TLV </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.TLVCollection">
            <summary> Collection of optional parametersin TLV format </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.TLVCollection.Item(System.UInt16)">
            <summary> Access to the collection by tag </summary>
            <param name="tag"></param>
            <returns> A TLV object </returns>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.TLVCollection.Item(ArdanStudios.Common.SmppClient.OptionalTags)">
            <summary> Access to the collection by an optional tag </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.TLVCollection.AddSARReferenceNumber(System.UInt16)">
            <summary> Adds the SAR reference number </summary>
            <param name="val"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.TLVCollection.AddSARSequenceNumber(System.Byte)">
            <summary> Adds the SAR sequence number </summary>
            <param name="val"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.TLVCollection.AddSARTotalSegments(System.Byte)">
            <summary> Adds the SAR total segments </summary>
            <param name="val"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.TLVCollection.AddMoreMessagesToSend(System.Boolean)">
            <summary> Adds the more messages to send </summary>
            <param name="val"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.TLVCollection.AddMessagePayload(System.Byte[])">
            <summary> Adds the more message pay load </summary>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.TLVCollection.Add(ArdanStudios.Common.SmppClient.OptionalTags,System.Byte[])">
            <summary> Adds the specified optional tag value </summary>
            <param name="tag"></param>
            <param name="val"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.UserData">
            <summary> UserData class contains the user data of PDU </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.UserData._ShortMessage">
            <summary> The octets of the text message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.UserData.ShortMessage">
            <summary> The octets of the text message </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.UserData.Headers">
            <summary> GSM User Data Header information in the short message </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UserData.#ctor">
            <summary> Constructor </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UserData.ShortMessageText(ArdanStudios.Common.SmppClient.DataCodings,ArdanStudios.Common.SmppClient.DataCodings)">
            <summary> Called to covnert the short message into a string </summary>
            <param name="defaultEncoding"></param>
            <param name="dataCoding"></param>
            <returns> string </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UserData.Create">
            <summary> Called to create a UserData object </summary>
            <returns> UserData </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UserData.Create(ArdanStudios.Common.SmppClient.SmppBuffer,System.Boolean)">
            <summary> Called to create a UserData object </summary>
            <param name="buf"></param>
            <param name="udhi"></param>
            <returns> UserData</returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UserData.Add(ArdanStudios.Common.SmppClient.UserData)">
            <summary> Called to add a new user data object to the buffer </summary>
            <param name="userData"></param>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.UserDataHeader">
            <summary> Represents GSM User Data Header information in the short message user data </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.UserDataHeader._IEI">
            <summary> Identifies Information Element in the User Data Header </summary>
        </member>
        <member name="F:ArdanStudios.Common.SmppClient.UserDataHeader._Data">
            <summary> Information Element Data </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.UserDataHeader.IEI_Id">
            <summary> Identifies Information Element id </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.UserDataHeader.IEI">
            <summary> Identifies Information Element in the User Data Header </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.UserDataHeader.Length">
            <summary> Length of Information Element </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.UserDataHeader.Data">
            <summary> Information Element Data </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UserDataHeader.#ctor">
            <summary> Constructor </summary>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UserDataHeader.#ctor(System.Byte,System.Byte,System.Byte[])">
            <summary> Constructor </summary>
            <param name="iei"></param>
            <param name="len"></param>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UserDataHeader.#ctor(ArdanStudios.Common.SmppClient.InformationElementIdentifiers,System.Byte,System.Byte[])">
            <summary> Constructor </summary>
            <param name="iei"></param>
            <param name="len"></param>
            <param name="data"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UserDataHeader.Create">
            <summary> Called to create a UserDataHeader object </summary>
            <returns> UserDataHeader </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UserDataHeader.Create(System.Byte,System.Byte,System.Byte[])">
            <summary> Called to create a UserDataHeader object </summary>
            <param name="iei"></param>
            <param name="len"></param>
            <param name="data"></param>
            <returns> UserDataHeader </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UserDataHeader.Create(ArdanStudios.Common.SmppClient.InformationElementIdentifiers,System.Byte,System.Byte[])">
            <summary> Called to create a UserDataHeader object </summary>
            <param name="iei"></param>
            <param name="len"></param>
            <param name="data"></param>
            <returns> UserDataHeader </returns>
        </member>
        <member name="T:ArdanStudios.Common.SmppClient.UserDataHeaderCollection">
            <summary> User Data Header Collection </summary>
        </member>
        <member name="P:ArdanStudios.Common.SmppClient.UserDataHeaderCollection.Item(ArdanStudios.Common.SmppClient.InformationElementIdentifiers)">
            <summary> Provides array type access </summary>
            <param name="iei"></param>
            <returns> A UserDataHeader object </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UserDataHeaderCollection.op_Implicit(System.Byte[])~ArdanStudios.Common.SmppClient.UserDataHeaderCollection">
            <summary> Allows the byte array to be assigned to a UserDataHeaderCollection object </summary>
            <param name="bytes"></param>
            <returns> UserDataHeaderCollection </returns>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UserDataHeaderCollection.AddConcatenatedShortMessages8bit(ArdanStudios.Common.SmppClient.DataCodings,System.Byte,System.Byte,System.Byte)">
            <summary> Concatenates the specify message </summary>
            <param name="defaultEncoding"></param>
            <param name="msgRef"></param>
            <param name="total"></param>
            <param name="seqNum"></param>
        </member>
        <member name="M:ArdanStudios.Common.SmppClient.UserDataHeaderCollection.Add(ArdanStudios.Common.SmppClient.InformationElementIdentifiers,System.Byte[])">
            <summary> Adds data to the user data header list </summary>
            <param name="iei"></param>
            <param name="data"></param>
        </member>
        <member name="T:ArdanStudios.Common.Data.DataTransaction">
            <summary> Abstracts a database transaction </summary>
        </member>
        <member name="F:ArdanStudios.Common.Data.DataTransaction.SQL_MONEY_MAX_VALUE">
            <summary> The maximum value for a money type in SQL </summary>
        </member>
        <member name="F:ArdanStudios.Common.Data.DataTransaction._disposed">
            <summary> Flag to indicate if the object has been disposed </summary>
        </member>
        <member name="F:ArdanStudios.Common.Data.DataTransaction.database">
            <summary> The database object that maintains the connection </summary>
        </member>
        <member name="F:ArdanStudios.Common.Data.DataTransaction.connection">
            <summary> The connection used for transactions </summary>
        </member>
        <member name="F:ArdanStudios.Common.Data.DataTransaction.transaction">
            <summary> The refence to a database transaction </summary>
        </member>
        <member name="P:ArdanStudios.Common.Data.DataTransaction.IsOpenTransaction">
            <summary> Flag to identify is a transaction is in progress </summary>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.#ctor">
            <summary> Constructor </summary>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.#ctor(System.String)">
            <summary> Constructor: Passing null for connectionString will use default connection </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.Dispose">
            <summary> Called to dipose the log </summary>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.Dispose(System.Boolean)">
            <summary> Called to dispose the transaction </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.Begin">
            <summary> Called to begin a transaction </summary>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.Commit">
            <summary> Called to commit the open transaction </summary>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.Rollback">
            <summary> Called to commit the open transaction </summary>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetStoredProcCommand(System.String)">
            <summary> Create a command object </summary>
            <param name="storedProcedureName"></param>
            <returns> A database command object </returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterTiny(System.Data.Common.DbCommand,System.String,System.Nullable{System.Byte})">
            <summary> Adds a new Tiny In parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterShort(System.Data.Common.DbCommand,System.String,System.Nullable{System.Int16})">
            <summary> Adds a new Short In parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterInteger(System.Data.Common.DbCommand,System.String,System.Nullable{System.Int32})">
            <summary> Adds a new Integer In parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterLong(System.Data.Common.DbCommand,System.String,System.Nullable{System.Int64})">
            <summary> Adds a new Long In parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterULong(System.Data.Common.DbCommand,System.String,System.Nullable{System.UInt64})">
            <summary> Adds a new Unsigned Long In parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterString(System.Data.Common.DbCommand,System.String,System.String)">
            <summary> Adds a new String In parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterDecimal(System.Data.Common.DbCommand,System.String,System.Nullable{System.Decimal})">
            <summary> Adds a new Decimal In parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterDouble(System.Data.Common.DbCommand,System.String,System.Nullable{System.Double})">
            <summary> Adds a new Double In parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterDateTime(System.Data.Common.DbCommand,System.String,System.Nullable{System.DateTime})">
            <summary> Adds a new DateTime In parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterTimeSpan(System.Data.Common.DbCommand,System.String,System.Nullable{System.TimeSpan})">
            <summary> Adds a new TimeSpan In parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterBoolean(System.Data.Common.DbCommand,System.String,System.Nullable{System.Boolean})">
            <summary> Adds a new Boolean In parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterXml(System.Data.Common.DbCommand,System.String,System.String)">
            <summary> Adds a new Xml In parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterTable(System.Data.Common.DbCommand,System.String,System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Server.SqlDataRecord})">
            <summary> Adds a new Table Parameter to command Object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value">Object that implements IEnumerable SqlDataRecord</param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterGuid(System.Data.Common.DbCommand,System.String,System.Nullable{System.Guid})">
            <summary> Adds a new GUID Parameter to command Object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value">Guid paramter</param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterVarBinary(System.Data.Common.DbCommand,System.String,System.Byte[])">
            <summary> Adds a new var binary Parameter to command Object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="data">binary data</param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddInParameterImage(System.Data.Common.DbCommand,System.String,System.Byte[])">
            <summary> Adds a new image Parameter to command Object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="image"> binary image data </param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddOutParameterBoolean(System.Data.Common.DbCommand,System.String)">
            <summary> Adds a new Boolean parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddOutParameterDateTime(System.Data.Common.DbCommand,System.String)">
            <summary> Adds a new DateTime parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddOutParameterTiny(System.Data.Common.DbCommand,System.String)">
            <summary> Adds a new tiny Out parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddOutParameterShort(System.Data.Common.DbCommand,System.String)">
            <summary> Adds a new Short Out parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddOutParameterImage(System.Data.Common.DbCommand,System.String)">
            <summary> Adds support for Image as an Out param.</summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddOutParameterInteger(System.Data.Common.DbCommand,System.String)">
            <summary> Adds a new Integer Out parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddOutParameterString(System.Data.Common.DbCommand,System.String,System.Int32)">
            <summary> Adds a new String Out parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="length"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddOutParameterDecimal(System.Data.Common.DbCommand,System.String)">
            <summary> Adds a new Decimal Out parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddOutParameterDouble(System.Data.Common.DbCommand,System.String)">
            <summary> Adds a new Double Out parameter to the command object </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddOutParameterLong(System.Data.Common.DbCommand,System.String)">
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddOutParameterULong(System.Data.Common.DbCommand,System.String)">
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddOutParameterGuid(System.Data.Common.DbCommand,System.String)">
            <summary>Add a GUID Out Parameter to the command object</summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.AddOutParameterGuid(System.Data.Common.DbCommand,System.String,System.Int32)">
            <summary>Add a VarBianry Out Parameter to the command object</summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="length"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ExecuteNonQuery(System.Data.Common.DbCommand,System.Int32)">
            <summary> Execute a command that does not return results </summary>
            <param name="command"></param>
            <param name="commandTimeout"></param>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ExecuteQuery(System.Data.Common.DbCommand,System.Int32)">
            <summary> Execute a command that does return results </summary>
            <param name="command"></param>
            <param name="commandTimeout"></param>
            <returns> A Sql Data Reader </returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ExecuteXmlReader(System.Data.Common.DbCommand,System.Int32)">
            <summary>Execute a command that returns data as XmlReader. Used for reports.</summary>
            <param name="command"></param>
            <param name="commandTimeout"></param>
            <returns>An XmlReader</returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ExecuteQuery(System.String,System.Data.Common.DbCommand,System.Int32)">
            <summary> Execute a command and return a DataSet </summary>
            <param name="tableName"></param>
            <param name="command"></param>
            <param name="commandTimeout"></param>
            <returns> DataSet of results </returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ExecuteQuery(System.String[],System.Data.Common.DbCommand,System.Int32)">
            <summary> Execute a command and return a DataSet </summary>
            <param name="tableNames"></param>
            <param name="command"></param>
            <param name="commandTimeout"></param>
            <returns> DataSet of results </returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueBoolean(System.Data.Common.DbCommand,System.String)">
            <summary> Capture the predefined boolean output parameter </summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns> The boolean value of the parameter</returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueTiny(System.Data.Common.DbCommand,System.String)">
            <summary> Capture the predefined short output parameter </summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns> The byte value of the parameter</returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueShort(System.Data.Common.DbCommand,System.String)">
            <summary> Capture the predefined short output parameter </summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns> The short value of the parameter</returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueInteger(System.Data.Common.DbCommand,System.String)">
            <summary> Capture the predefined integer output parameter </summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns> The integer value of the parameter</returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueIntegerNull(System.Data.Common.DbCommand,System.String)">
            <summary> Capture the predefined integer output parameter </summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns> The integer value of the parameter</returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueString(System.Data.Common.DbCommand,System.String)">
            <summary> Capture the predefined string output parameter </summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns> The string value of the parameter</returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueDecimal(System.Data.Common.DbCommand,System.String)">
            <summary> Capture the predefined decimal output parameter </summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns> The decimal value of the parameter</returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueDouble(System.Data.Common.DbCommand,System.String)">
            <summary> Capture the predefined double output parameter </summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns> The double value of the parameter</returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueDecimalNull(System.Data.Common.DbCommand,System.String)">
            <summary> Capture the predefined decimal output parameter </summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns> The decimal value of the parameter</returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueDoubleNull(System.Data.Common.DbCommand,System.String)">
            <summary> Capture the predefined double output parameter </summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns> The double value of the parameter</returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueDateTime(System.Data.Common.DbCommand,System.String)">
            <summary> Capture the predefined DateTime output parameter </summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns> The DateTime value of the parameter</returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueTimeSpan(System.Data.Common.DbCommand,System.String)">
            <summary> Capture the predefined TimeSpan output parameter </summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns> The TimeSpan value of the parameter</returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueLong(System.Data.Common.DbCommand,System.String)">
            <summary> Capture the predefined long output parameter </summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns> The long value of the parameter</returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueULong(System.Data.Common.DbCommand,System.String)">
            <summary> Capture the predefined unsigned long output parameter </summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns> The unsigned long value of the parameter</returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueGuid(System.Data.Common.DbCommand,System.String)">
            <summary>Capture the specified Guid Parameter</summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.GetParameterValueVarBinary(System.Data.Common.DbCommand,System.String)">
            <summary>Capture the specified VarBinary Parameter</summary>
            <param name="command"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadTiny(System.Data.IDataReader,System.Int32)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadTiny(System.Data.IDataReader,System.String)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadShort(System.Data.IDataReader,System.Int32)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadShort(System.Data.IDataReader,System.String)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadInteger(System.Data.IDataReader,System.Int32)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadInteger(System.Data.IDataReader,System.String)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadDecimal(System.Data.IDataReader,System.Int32)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadDecimal(System.Data.IDataReader,System.String)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadDouble(System.Data.IDataReader,System.Int32)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadDouble(System.Data.IDataReader,System.String)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadString(System.Data.IDataReader,System.Int32)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadString(System.Data.IDataReader,System.String)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadDateTime(System.Data.IDataReader,System.Int32)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadDateTime(System.Data.IDataReader,System.String)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadTimeSpan(System.Data.IDataReader,System.Int32)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadTimeSpan(System.Data.IDataReader,System.String)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadBoolean(System.Data.IDataReader,System.Int32)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadBoolean(System.Data.IDataReader,System.String)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadLong(System.Data.IDataReader,System.Int32)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadLong(System.Data.IDataReader,System.String)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadULong(System.Data.IDataReader,System.Int32)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadULong(System.Data.IDataReader,System.String)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadGuid(System.Data.IDataReader,System.Int32)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadGuid(System.Data.IDataReader,System.String)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadImage(System.Data.IDataReader,System.Int32)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.ReadImage(System.Data.IDataReader,System.String)">
            <summary> Capture the column value for the current row </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ArdanStudios.Common.Data.DataTransaction.QueryString(System.Data.Common.DbCommand)">
            <summary> Called to produce the query string from the configured DBCommand object. Used for logging purposes </summary>
            <param name="dbCommand"></param>
            <returns></returns>
        </member>
        <member name="T:ArdanStudios.Common.Utilities.SynchronousTimer">
            <summary> Maintains a synchronous timer event </summary>
        </member>
        <member name="T:ArdanStudios.Common.Utilities.SynchronousTimer.SynchronousTimerHandler">
            <summary> Called by the timer </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SynchronousTimer.ShuttingDown">
            <summary> Set when the class is shutting down </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SynchronousTimer.Disposed">
            <summary> Flag that determines whether this instance has been disposed or not yet </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SynchronousTimer.TimerEventInterval">
            <summary> Thread waits on this event on the timer interval </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SynchronousTimer.TimerWaitShutdown">
            <summary> Thread waits on this event for thread to shutdown </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SynchronousTimer.TimerInterval">
            <summary> The interval the timer should fire </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SynchronousTimer.TimerState">
            <summary> State to be passed in </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SynchronousTimer.TimerThread">
            <summary> Handle to the timer thread </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SynchronousTimer.TimerMethod">
            <summary> Handle to the timer function </summary>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SynchronousTimer.#ctor(ArdanStudios.Common.Utilities.SynchronousTimer.SynchronousTimerHandler,System.Object,System.Int32,System.String)">
            <summary> Constructor </summary>
            <param name="timerMethod"></param>
            <param name="timerInterval"></param>
            <param name="timerState"></param>
            <param name="timerName"></param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SynchronousTimer.#ctor(ArdanStudios.Common.Utilities.SynchronousTimer.SynchronousTimerHandler,System.Object,System.Int32,System.Threading.ThreadPriority,System.String)">
            <summary> Constructor </summary>
            <param name="timerMethod"></param>
            <param name="timerInterval"></param>
            <param name="timerState"></param>
            <param name="threadPriority"></param>
            <param name="timerName"></param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SynchronousTimer.#ctor(ArdanStudios.Common.Utilities.SynchronousTimer.SynchronousTimerHandler,System.Object,System.String)">
            <summary> Constructor that will set off the timer every minute on the minute </summary>
            <param name="timerMethod"></param>
            <param name="timerState"></param>
            <param name="timerName"></param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SynchronousTimer.Dispose">
            <summary> Dispose </summary>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SynchronousTimer.Dispose(System.Boolean)">
            <summary> Dispose </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SynchronousTimer.SignalTimer">
            <summary> Called to signal the timer to wake the thread up early</summary>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SynchronousTimer.PerformTimerEvent">
            <summary> Called to implement the timer </summary>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SynchronousTimer.PerformMinuteTimerEvent">
            <summary> Called to implement the timer every minute on the second </summary>
        </member>
        <member name="T:ArdanStudios.Common.Utilities.SocketClient">
            <summary> This class abstract a socket </summary>
        </member>
        <member name="T:ArdanStudios.Common.Utilities.SocketClient.MESSAGE_HANDLER">
            <summary> Called when a message is extracted from the socket </summary>
        </member>
        <member name="T:ArdanStudios.Common.Utilities.SocketClient.CLOSE_HANDLER">
            <summary> Called when a socket connection is closed </summary>
        </member>
        <member name="T:ArdanStudios.Common.Utilities.SocketClient.ERROR_HANDLER">
            <summary> Called when a socket error occurs </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.NextUniqueKey">
            <summary> Maintain the next unique key </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.Disposed">
            <summary> Flag when disposed is called </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.SocketServer">
            <summary> The SocketServer for this socket object </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.ClientSocket">
            <summary> The socket for the accepted client connection </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.TcpClient">
            <summary> A TcpClient object for client established connections </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.NetworkStream">
            <summary> A network stream object </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.CallbackReadFunction">
            <summary> RetType: A callback object for processing recieved socket data </summary>	    
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.CallbackWriteFunction">
            <summary> RetType: A callback object for processing send socket data </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.MessageHandler">
            <summary> A reference to a user supplied function to be called when a socket message arrives </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.CloseHandler">
            <summary> A reference to a user supplied function to be called when a socket connection is closed </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.ErrorHandler">
            <summary> A reference to a user supplied function to be called when a socket error occurs </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.IpAddress">
            <summary> The IpAddress of the connection </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.Port">
            <summary> The Port of the connection </summary>summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.SocketIndex">
            <summary> The index position in the server dictionary of socket connections </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.RawBuffer">
            <summary> A raw buffer to capture data comming off the socket </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.SizeOfRawBuffer">
            <summary> Size of the raw buffer for received socket data </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.MessageLength">
            <summary> The length of the message </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.UniqueKey">
            <summary> A unique key for the socket object </summary>
        </member>
        <member name="P:ArdanStudios.Common.Utilities.SocketClient.IsConnected">
            <summary> A flag to determine if the Socket Client is connected </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.StringBuffer">
            <summary> A string buffer to be used by the application developer </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.MessageBuffer">
            <summary> A memory stream buffer to be used by the application developer </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.ByteBuffer">
            <summary> A byte buffer to be used by the application developer </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.ListBuffer">
            <summary> A list buffer to be used by the application developer </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.BufferedBytes">
            <summary> The number of bytes that have been buffered </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.UserArg">
            <summary> A reference to a user defined object to be passed through the handler functions </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketClient.IsAvailable">
            <summary> UserDefined flag to indicate if the socket object is available for use </summary>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketClient.#ctor(System.Int32,System.Int32,System.Object,ArdanStudios.Common.Utilities.SocketClient.MESSAGE_HANDLER,ArdanStudios.Common.Utilities.SocketClient.CLOSE_HANDLER,ArdanStudios.Common.Utilities.SocketClient.ERROR_HANDLER)">
            <summary> Constructor for client support </summary>
            <param name="sizeOfRawBuffer"> The size of the raw buffer </param>
            <param name="sizeOfByteBuffer"> The size of the byte buffer </param>
            <param name="userArg"> A Reference to the Users arguments </param>
            <param name="messageHandler"> Reference to the user defined message handler function </param>
            <param name="closeHandler"> Reference to the user defined close handler function </param>
            <param name="errorHandler"> Reference to the user defined error handler function </param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketClient.#ctor(ArdanStudios.Common.Utilities.SocketServer,System.Net.Sockets.Socket,System.String,System.Int32,System.Int32,System.Int32,System.Object,ArdanStudios.Common.Utilities.SocketClient.MESSAGE_HANDLER,ArdanStudios.Common.Utilities.SocketClient.CLOSE_HANDLER,ArdanStudios.Common.Utilities.SocketClient.ERROR_HANDLER)">
            <summary> Constructor for SocketServer Suppport </summary>
            <param name="socketServer"> A Reference to the parent SocketServer </param>
            <param name="clientSocket"> The Socket object we are encapsulating </param>
            <param name="ipAddress"> The IpAddress of the remote server </param>
            <param name="port"> The Port of the remote server </param>
            <param name="sizeOfRawBuffer"> The size of the raw buffer </param>
            <param name="sizeOfByteBuffer"> The size of the byte buffer </param>
            <param name="userArg"> A Reference to the Users arguments </param>
            <param name="messageHandler"> Reference to the user defined message handler function </param>
            <param name="closeHandler"> Reference to the user defined close handler function </param>
            <param name="errorHandler"> Reference to the user defined error handler function </param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketClient.Dispose">
            <summary> Dispose </summary>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketClient.Dispose(System.Boolean)">
            <summary> Dispose the server </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketClient.ReceiveComplete(System.IAsyncResult)">
            <summary> Called when a message arrives </summary>
            <param name="ar"> An async result interface </param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketClient.SendComplete(System.IAsyncResult)">
            <summary> Called when a message is sent </summary>
            <param name="ar"> An async result interface </param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketClient.NewUniqueKey">
            <summary> Called to generate a unique key </summary>
            <returns> long </returns>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketClient.Connect(System.String,System.Int32)">
            <summary> Function used to connect to a server </summary>
            <param name="ipAddress"> The address to connect to </param>
            <param name="port"> The Port to connect to </param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketClient.Disconnect">
            <summary> Called to disconnect the client </summary>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketClient.Send(System.String)">
            <summary> Function to send a string to the server </summary>
            <param name="message"> A string to send </param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketClient.Send(System.Byte[])">
            <summary> Function to send a raw buffer to the server </summary>
            <param name="rawBuffer"> A Raw buffer of bytes to send </param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketClient.Send(System.Char)">
            <summary> Function to send a char to the server </summary>
            <param name="charValue"> A Raw char to send </param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketClient.Receive">
            <summary> Wait for a message to arrive </summary>
        </member>
        <member name="T:ArdanStudios.Common.Utilities.SocketServer">
            <summary> This class accepts multiple socket connections and handles them asychronously </summary>
        </member>
        <member name="T:ArdanStudios.Common.Utilities.SocketServer.MESSAGE_HANDLER">
            <summary> Called when a message is extracted from the socket </summary>
        </member>
        <member name="T:ArdanStudios.Common.Utilities.SocketServer.CLOSE_HANDLER">
            <summary> Called when a socket connection is closed </summary>
        </member>
        <member name="T:ArdanStudios.Common.Utilities.SocketServer.ERROR_HANDLER">
            <summary> Called when a socket error occurs </summary>
        </member>
        <member name="T:ArdanStudios.Common.Utilities.SocketServer.ACCEPT_HANDLER">
            <summary> Called when a socket connection is accepted </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketServer.Disposed">
            <summary> Flag when disposed is called </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketServer.TcpListener">
            <summary> A TcpListener object to accept socket connections </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketServer.SizeOfRawBuffer">
            <summary> Size of the raw buffer for received socket data </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketServer.SizeOfByteBuffer">
            <summary> Size of the raw buffer for user purpose </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketServer.AcceptThread">
            <summary> RetType: A thread to process accepting socket connections </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketServer.MessageHandler">
            <summary> A reference to a user supplied function to be called when a socket message arrives </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketServer.CloseHandler">
            <summary> A reference to a user supplied function to be called when a socket connection is closed </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketServer.ErrorHandler">
            <summary> A reference to a user supplied function to be called when a socket error occurs </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketServer.AcceptHandler">
            <summary> A reference to a user supplied function to be called when a socket connection is accepted </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketServer.SocketClientList">
            <summary> RefTypeArray: An Array of SocketClient objects </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketServer.IpAddress">
            <summary> The IpAddress to either connect to or listen on </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketServer.Port">
            <summary> The Port to either connect to or listen on </summary>
        </member>
        <member name="F:ArdanStudios.Common.Utilities.SocketServer.UserArg">
            <summary> A reference to a user defined object to be passed through the handler functions </summary>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketServer.#ctor">
            <summary> Constructor </summary>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketServer.Dispose">
            <summary> Dispose function to shutdown the SocketManager </summary>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketServer.Dispose(System.Boolean)">
            <summary> Dispose the server </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketServer.AcceptConnections">
            <summary> Function to process and accept socket connection requests </summary>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketServer.Start(System.String,System.Int32,System.Int32,System.Int32,System.Object,ArdanStudios.Common.Utilities.SocketServer.MESSAGE_HANDLER,ArdanStudios.Common.Utilities.SocketServer.ACCEPT_HANDLER,ArdanStudios.Common.Utilities.SocketServer.CLOSE_HANDLER,ArdanStudios.Common.Utilities.SocketServer.ERROR_HANDLER)">
            <summary> Function to start the SocketServer </summary>
            <param name="ipAddress"> The IpAddress to listening on </param>
            <param name="port"> The Port to listen on </param>
            <param name="sizeOfRawBuffer"> Size of the Raw Buffer </param>
            <param name="sizeOfByteBuffer"> Size of the byte buffer </param>
            <param name="userArg"> User supplied arguments </param>
            <param name="messageHandler"> Function pointer to the user MessageHandler function </param>
            <param name="acceptHandler"> Function pointer to the user AcceptHandler function </param>
            <param name="closeHandler"> Function pointer to the user CloseHandler function </param>
            <param name="errorHandler"> Function pointer to the user ErrorHandler function </param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketServer.Stop">
            <summary> Function to stop the SocketServer.  It can be restarted with Start </summary>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketServer.RemoveSocket(ArdanStudios.Common.Utilities.SocketClient)">
            <summary> Funciton to remove a socket from the list of sockets </summary>
            <param name="socketClient"> A reference to a socket to remove </param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketServer.RetrieveSocket(System.Int32)">
            <summary> Called to retrieve the socket object by the Socket Index </summary>
            <param name="socketIndex"></param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketServer.SendAll(System.Byte[])">
            <summary> Called to send a message to call socket clients </summary>
            <param name="rawBuffer"></param>
        </member>
        <member name="M:ArdanStudios.Common.Utilities.SocketServer.SendAll(System.String)">
            <summary> Called to send a message to call socket clients </summary>
            <param name="message"></param>
        </member>
    </members>
</doc>
